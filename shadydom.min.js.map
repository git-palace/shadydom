{"version":3,"sources":["utils.js","array-splice.js","tree.js","shady.js","innerHTML.js","element-mixin.js","patch.js","event-mixin.js","distributor.js","env.js"],"names":["isShadyRoot","obj","Boolean","__localName","matchesSelector","element","selector","matches","call","copyOwnProperty","name","source","target","let","pd","Object","getOwnPropertyDescriptor","defineProperty","extend","n","n$","getOwnPropertyNames","i","length","extendAll","sources","mixin","patchPrototype","proto","getPrototypeOf","hasOwnProperty","patchProto","create","__sourceProto","__patchProto","setPrototypeOf","newSplice","index","removed","addedCount","getNativeProperty","property","descriptors","HTMLElement","prototype","Element","Node","get","enqueue","callback","scheduled","utils.promish","then","flush","flushList","push","flushCount","shift","customElements","const","isFlushedMaxed","flushMax","Error","escapeReplace","c","escapeAttr","s","replace","escapeAttrRegExp","escapeData","escapeDataRegExp","makeSet","arr","set","getOuterHTML","node","parentNode","composed","nodeType","ELEMENT_NODE","attr","tagName","localName","attrs","attributes","value","voidElements","getInnerHTML","TEXT_NODE","data","plaintextParents","COMMENT_NODE","window","console","error","content","child","c$","childNodes","l","filterMutations","mutations","targetRootNode","getRootNode","filter","mutation","mutationInScope","addedNodes","nodes","Array","from","configurable","patchNode","utils.settings","inUse","isNodePatched","patchImpl","canPatchNode","tree","saveChildNodes","patch","unpatchNode","unpatch","__patched","pathComposer","startNode","composedPath","current","startRoot","assignedSlot","DOCUMENT_FRAGMENT_NODE","host","document","retarget","refNode","path","utils.isShadyRoot","ancestor","lastRoot","root","rootIdx","refNodePath","p$","indexOf","mixinComposedFlag","Base","klazz","type","options","event","__composed","utils.mixin","fireHandlers","phase","hs","__handlers","fn","__immediatePropagationStopped","retargetNonBubblingEvent","e","__propagationStopped","Event","BUBBLING_PHASE","shouldCapture","optionsOrCapture","capture","addEventListener","this","__eventListenerCount","wrappedFn","__target","__relatedTarget","relatedTarget","utils.patchPrototype","EventMixin","eventPhase","stopImmediatePropagation","__eventWrappers","nonBubblingEventsToRetarget","bubble","origAddEventListener","removeEventListener","wrappers","wrappersForType","wrapper","pop","origRemoveEventListener","idx","splice","activateFocusEventOverrides","ev","settings","ShadyDOM","hasNativeShadowDOM","attachShadow","force","promish","p","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","common","Promise","resolve","cb","twiddle","createTextNode","observer","MutationObserver","disconnect","observe","characterData","EDIT_LEAVE","EDIT_UPDATE","EDIT_ADD","EDIT_DELETE","ArraySplice","calcEditDistances","currentStart","currentEnd","old","oldStart","oldEnd","rowCount","columnCount","distances","j","equals","north","west","spliceOperationsFromEditDistances","edits","min","northWest","reverse","calcSplices","prefixCount","suffixCount","minLength","Math","sharedPrefix","sharedSuffix","ops","undefined","splices","oldIndex","searchLength","index1","index2","count","calculateSplices","previous","currentValue","previousValue","nativeInsertBefore","insertBefore","nativeAppendChild","appendChild","nativeRemoveChild","removeChild","arrayCopyChildNodes","parent","copy","firstChild","nextSibling","arrayCopyChildren","firstElementChild","nextElementSibling","arrayCopy","a$","Logical","Composed","hasParentNode","saveComposedData","__dom","hasChildNodes","getChildNodes","_getChildNodes","getFirstChild","getNextSibling","getParentNode","getLastChild","lastChild","getPreviousSibling","previousSibling","getFirstElementChild","_getFirstElementChild","getLastElementChild","_getLastElementChild","getNextElementSibling","_getNextElementSibling","getPreviousElementSibling","_getPreviousElementSibling","utils.common","recordInsertBefore","container","ref_node","_linkNode","recordRemoveChild","$parentNode","$childNodes","$firstChild","$nextSibling","getComposedChildNodes","$lastChild","$previousSibling","lastElementChild","previousElementSibling","clearChildNodes","saveParentNode","newChild","refChild","_addChild","currentParent","_removeChild","isFrag","oldParent","NormalizedEvent","inType","params","createEvent","initEvent","bubbles","cancelable","Distributor","anonymous","insertionPointTag","getInsertionPoints","querySelectorAll","hasInsertionPoint","_insertionPoints","isInsertionPoint","distribute","distributePool","collectPool","pool","dirtyRoots","distributeInsertionPoint","shadyRoot","_assignedSlot","insertionPoint","prevAssignedNodes","_assignedNodes","clearAssignedSlots","needsSlotChange","anyDistributed","matchesInsertionPoint","__prevAssignedSlot","distributeNodeInto","children","setDistributedNodesOnInsertionPoint","_fireSlotChange","slot","savePrevious","slotName","getAttribute","trim","_distributedNodes","d$","dispatchEvent","isFinalDestination","ShadyRoot","frag","createDocumentFragment","__proto__","ShadyFragmentMixin","_init","ShadyMixin","_clean","_hasRendered","_distributor","update","distributionRoot","_findDistributionRoot","render","_elementNeedsDistribution","_skipUpdateInsertionPoints","updateInsertionPoints","compose","forceRender","i$","__insertionPoints","insertionPoints","_composeTree","_updateChildNodes","_composeNode","distributedNodes","distributedNode","d","next","getInsertionPointTag","DocumentFragment","utils.extend","list","mixinImpl","addNode","ownerRoot","ownerShadyRootForNode","__noInsertionPoint","ipAdded","_maybeAddInsertionPoint","_addedNode","handled","_maybeDistribute","removeNode","distributed","logicalParent","maybeDistributeParent","_removeDistributedChildren","_removeOwnerShadyRoot","_removedNode","_scheduleObserver","addedNode","removedNode","removedNodes","schedule","removeNodeFromParent","_hasCachedOwnerRoot","__ownerShadyRoot","documentElement","contains","fragContent","querySelector","wrappedContent","hasContent","needsDist","_nodeNeedsDistribution","added","np","na","hostNeedsDist","ip$","_contains","dc$","assignedNodes","flatten","firstComposedNode","clearNode","maybeDistributeAttributeChange","query","matcher","halter","_queryElements","elements","_queryElement","result","activeElementForNode","active","activeElement","activeRoot","nativeCloneNode","cloneNode","nativeImportNode","Document","importNode","nativeSetAttribute","setAttribute","nativeRemoveAttribute","removeAttribute","NodeMixin","defineProperties","parentElement","FragmentMixin","replaceChild","utils.matchesSelector","deep","nc","externalNode","doc","ownerDocument","isArray","textContent","tc","cn","join","text","innerHTML","createElement","ElementMixin","shadowRoot","activeElementDescriptor","ActiveElementMixin","UnderActiveElementMixin","_activeElement","Mixins","utils.extendAll","Fragment","AsyncObserver","_scheduled","callbacks","Set","this$1","takeRecords","forEach","observeChildren","add","_callback","_observer","_node","unobserveChildren","handle","delete","size","patchedCount","log","head","hasPrototypeDescriptors","warn","mixinForObject","mixinForNode","DOCUMENT_NODE","alwaysComposed","blur","focus","focusin","focusout","click","dblclick","mousedown","mouseenter","mouseleave","mousemove","mouseout","mouseover","mouseup","wheel","beforeinput","input","keydown","keyup","compositionstart","compositionupdate","compositionend","touchstart","touchend","touchmove","touchcancel","pointerover","pointerenter","pointerdown","pointermove","pointerup","pointercancel","pointerout","pointerleave","gotpointercapture","lostpointercapture","dragstart","drag","dragenter","dragleave","dragover","drop","dragend","DOMActivate","DOMFocusIn","DOMFocusOut","keypress","isTrusted","__composedPath","currentTarget","__relatedTargetComposedPath","stopPropagation","PatchedEvent","PatchedCustomEvent","CustomEvent","PatchedMouseEvent","MouseEvent","patch.patchNode","isPatched","patch.isNodePatched","patch.unpatchNode","createRootAndEnsurePatched","events.addEventListener","events.removeEventListener","events.PatchedEvent","events.PatchedCustomEvent","events.PatchedMouseEvent","events.activateFocusEventOverrides"],"mappings":"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","file":"shadydom.min.js","sourcesContent":["/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nexport let settings = window.ShadyDOM || {};\r\n\r\nsettings.hasNativeShadowDOM = Boolean(Element.prototype.attachShadow && Node.prototype.getRootNode);\r\n\r\nsettings.inUse = settings.force || !settings.hasNativeShadowDOM;\r\n\r\nexport function isShadyRoot(obj) {\r\n  return Boolean(obj.__localName === 'ShadyRoot');\r\n}\r\n\r\nlet p = Element.prototype;\r\nlet matches = p.matches || p.matchesSelector ||\r\n  p.mozMatchesSelector || p.msMatchesSelector ||\r\n  p.oMatchesSelector || p.webkitMatchesSelector;\r\n\r\nexport function matchesSelector(element, selector) {\r\n  return matches.call(element, selector);\r\n}\r\n\r\nfunction copyOwnProperty(name, source, target) {\r\n  let pd = Object.getOwnPropertyDescriptor(source, name);\r\n  if (pd) {\r\n    Object.defineProperty(target, name, pd);\r\n  }\r\n}\r\n\r\nexport function extend(target, source) {\r\n  if (target && source) {\r\n    let n$ = Object.getOwnPropertyNames(source);\r\n    for (let i=0, n; (i<n$.length) && (n=n$[i]); i++) {\r\n      copyOwnProperty(n, source, target);\r\n    }\r\n  }\r\n  return target || source;\r\n}\r\n\r\nexport function extendAll(target, ...sources) {\r\n  for (let i=0; i < sources.length; i++) {\r\n    extend(target, sources[i]);\r\n  }\r\n  return target;\r\n}\r\n\r\nexport function mixin(target, source) {\r\n  for (var i in source) {\r\n    target[i] = source[i];\r\n  }\r\n  return target;\r\n}\r\n\r\nexport function patchPrototype(obj, mixin) {\r\n  let proto = Object.getPrototypeOf(obj);\r\n  if (!proto.hasOwnProperty('__patchProto')) {\r\n    let patchProto = Object.create(proto);\r\n    patchProto.__sourceProto = proto;\r\n    extend(patchProto, mixin);\r\n    proto.__patchProto = patchProto;\r\n  }\r\n  Object.setPrototypeOf(obj, proto.__patchProto);\r\n}\r\n\r\nexport function unpatchPrototype(obj) {\r\n  if (obj.__sourceProto) {\r\n    Object.setPrototypeOf(obj, obj.__sourceProto);\r\n  }\r\n}\r\n\r\nexport let common = {};\r\n\r\n// TODO(sorvell): actually rely on a real Promise polyfill...\r\nexport let promish;\r\nif (window.Promise) {\r\n  promish = Promise.resolve();\r\n} else {\r\n  promish = {\r\n    then: function(cb) {\r\n      let twiddle = document.createTextNode('');\r\n      let observer = new MutationObserver(function() {\r\n        observer.disconnect();\r\n        cb();\r\n      });\r\n      observer.observe(twiddle, {characterData: true});\r\n    }\r\n  }\r\n}","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nfunction newSplice(index, removed, addedCount) {\r\n  return {\r\n    index: index,\r\n    removed: removed,\r\n    addedCount: addedCount\r\n  };\r\n}\r\n\r\nconst EDIT_LEAVE = 0;\r\nconst EDIT_UPDATE = 1;\r\nconst EDIT_ADD = 2;\r\nconst EDIT_DELETE = 3;\r\n\r\nlet ArraySplice = {\r\n\r\n  // Note: This function is *based* on the computation of the Levenshtein\r\n  // \"edit\" distance. The one change is that \"updates\" are treated as two\r\n  // edits - not one. With Array splices, an update is really a delete\r\n  // followed by an add. By retaining this, we optimize for \"keeping\" the\r\n  // maximum array items in the original array. For example:\r\n  //\r\n  //   'xxxx123' -> '123yyyy'\r\n  //\r\n  // With 1-edit updates, the shortest path would be just to update all seven\r\n  // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\r\n  // leaves the substring '123' intact.\r\n  calcEditDistances(current, currentStart, currentEnd,\r\n                              old, oldStart, oldEnd) {\r\n    // \"Deletion\" columns\r\n    let rowCount = oldEnd - oldStart + 1;\r\n    let columnCount = currentEnd - currentStart + 1;\r\n    let distances = new Array(rowCount);\r\n\r\n    // \"Addition\" rows. Initialize null column.\r\n    for (let i = 0; i < rowCount; i++) {\r\n      distances[i] = new Array(columnCount);\r\n      distances[i][0] = i;\r\n    }\r\n\r\n    // Initialize null row\r\n    for (let j = 0; j < columnCount; j++)\r\n      distances[0][j] = j;\r\n\r\n    for (let i = 1; i < rowCount; i++) {\r\n      for (let j = 1; j < columnCount; j++) {\r\n        if (this.equals(current[currentStart + j - 1], old[oldStart + i - 1]))\r\n          distances[i][j] = distances[i - 1][j - 1];\r\n        else {\r\n          let north = distances[i - 1][j] + 1;\r\n          let west = distances[i][j - 1] + 1;\r\n          distances[i][j] = north < west ? north : west;\r\n        }\r\n      }\r\n    }\r\n\r\n    return distances;\r\n  },\r\n\r\n  // This starts at the final weight, and walks \"backward\" by finding\r\n  // the minimum previous weight recursively until the origin of the weight\r\n  // matrix.\r\n  spliceOperationsFromEditDistances(distances) {\r\n    let i = distances.length - 1;\r\n    let j = distances[0].length - 1;\r\n    let current = distances[i][j];\r\n    let edits = [];\r\n    while (i > 0 || j > 0) {\r\n      if (i == 0) {\r\n        edits.push(EDIT_ADD);\r\n        j--;\r\n        continue;\r\n      }\r\n      if (j == 0) {\r\n        edits.push(EDIT_DELETE);\r\n        i--;\r\n        continue;\r\n      }\r\n      let northWest = distances[i - 1][j - 1];\r\n      let west = distances[i - 1][j];\r\n      let north = distances[i][j - 1];\r\n\r\n      let min;\r\n      if (west < north)\r\n        min = west < northWest ? west : northWest;\r\n      else\r\n        min = north < northWest ? north : northWest;\r\n\r\n      if (min == northWest) {\r\n        if (northWest == current) {\r\n          edits.push(EDIT_LEAVE);\r\n        } else {\r\n          edits.push(EDIT_UPDATE);\r\n          current = northWest;\r\n        }\r\n        i--;\r\n        j--;\r\n      } else if (min == west) {\r\n        edits.push(EDIT_DELETE);\r\n        i--;\r\n        current = west;\r\n      } else {\r\n        edits.push(EDIT_ADD);\r\n        j--;\r\n        current = north;\r\n      }\r\n    }\r\n\r\n    edits.reverse();\r\n    return edits;\r\n  },\r\n\r\n  /**\r\n   * Splice Projection functions:\r\n   *\r\n   * A splice map is a representation of how a previous array of items\r\n   * was transformed into a new array of items. Conceptually it is a list of\r\n   * tuples of\r\n   *\r\n   *   <index, removed, addedCount>\r\n   *\r\n   * which are kept in ascending index order of. The tuple represents that at\r\n   * the |index|, |removed| sequence of items were removed, and counting forward\r\n   * from |index|, |addedCount| items were added.\r\n   */\r\n\r\n  /**\r\n   * Lacking individual splice mutation information, the minimal set of\r\n   * splices can be synthesized given the previous state and final state of an\r\n   * array. The basic approach is to calculate the edit distance matrix and\r\n   * choose the shortest path through it.\r\n   *\r\n   * Complexity: O(l * p)\r\n   *   l: The length of the current array\r\n   *   p: The length of the old array\r\n   */\r\n  calcSplices(current, currentStart, currentEnd,\r\n                        old, oldStart, oldEnd) {\r\n    let prefixCount = 0;\r\n    let suffixCount = 0;\r\n    let splice;\r\n\r\n    let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\r\n    if (currentStart == 0 && oldStart == 0)\r\n      prefixCount = this.sharedPrefix(current, old, minLength);\r\n\r\n    if (currentEnd == current.length && oldEnd == old.length)\r\n      suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);\r\n\r\n    currentStart += prefixCount;\r\n    oldStart += prefixCount;\r\n    currentEnd -= suffixCount;\r\n    oldEnd -= suffixCount;\r\n\r\n    if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\r\n      return [];\r\n\r\n    if (currentStart == currentEnd) {\r\n      splice = newSplice(currentStart, [], 0);\r\n      while (oldStart < oldEnd)\r\n        splice.removed.push(old[oldStart++]);\r\n\r\n      return [ splice ];\r\n    } else if (oldStart == oldEnd)\r\n      return [ newSplice(currentStart, [], currentEnd - currentStart) ];\r\n\r\n    let ops = this.spliceOperationsFromEditDistances(\r\n        this.calcEditDistances(current, currentStart, currentEnd,\r\n                               old, oldStart, oldEnd));\r\n\r\n    splice = undefined;\r\n    let splices = [];\r\n    let index = currentStart;\r\n    let oldIndex = oldStart;\r\n    for (let i = 0; i < ops.length; i++) {\r\n      switch(ops[i]) {\r\n        case EDIT_LEAVE:\r\n          if (splice) {\r\n            splices.push(splice);\r\n            splice = undefined;\r\n          }\r\n\r\n          index++;\r\n          oldIndex++;\r\n          break;\r\n        case EDIT_UPDATE:\r\n          if (!splice)\r\n            splice = newSplice(index, [], 0);\r\n\r\n          splice.addedCount++;\r\n          index++;\r\n\r\n          splice.removed.push(old[oldIndex]);\r\n          oldIndex++;\r\n          break;\r\n        case EDIT_ADD:\r\n          if (!splice)\r\n            splice = newSplice(index, [], 0);\r\n\r\n          splice.addedCount++;\r\n          index++;\r\n          break;\r\n        case EDIT_DELETE:\r\n          if (!splice)\r\n            splice = newSplice(index, [], 0);\r\n\r\n          splice.removed.push(old[oldIndex]);\r\n          oldIndex++;\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (splice) {\r\n      splices.push(splice);\r\n    }\r\n    return splices;\r\n  },\r\n\r\n  sharedPrefix(current, old, searchLength) {\r\n    for (let i = 0; i < searchLength; i++)\r\n      if (!this.equals(current[i], old[i]))\r\n        return i;\r\n    return searchLength;\r\n  },\r\n\r\n  sharedSuffix(current, old, searchLength) {\r\n    let index1 = current.length;\r\n    let index2 = old.length;\r\n    let count = 0;\r\n    while (count < searchLength && this.equals(current[--index1], old[--index2]))\r\n      count++;\r\n\r\n    return count;\r\n  },\r\n\r\n  calculateSplices(current, previous) {\r\n    return this.calcSplices(current, 0, current.length, previous, 0,\r\n                            previous.length);\r\n  },\r\n\r\n  equals(currentValue, previousValue) {\r\n    return currentValue === previousValue;\r\n  }\r\n\r\n};\r\n\r\nexport let calculateSplices = (current, previous) =>\r\n  ArraySplice.calculateSplices(current, previous);\r\n","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\n// TODO(sorvell): circular (patch loads tree and tree loads patch)\r\n// for now this is stuck on `utils`\r\n//import {patchNode} from './patch'\r\nimport * as utils from './utils'\r\n\r\n// native add/remove\r\nlet nativeInsertBefore = Element.prototype.insertBefore;\r\nlet nativeAppendChild = Element.prototype.appendChild;\r\nlet nativeRemoveChild = Element.prototype.removeChild;\r\n\r\n/**\r\n * `tree` is a dom manipulation library used by ShadyDom to\r\n * manipulate composed and logical trees.\r\n */\r\nexport let tree = {\r\n\r\n  // sad but faster than slice...\r\n  arrayCopyChildNodes(parent) {\r\n    let copy=[], i=0;\r\n    for (let n=parent.firstChild; n; n=n.nextSibling) {\r\n      copy[i++] = n;\r\n    }\r\n    return copy;\r\n  },\r\n\r\n  arrayCopyChildren(parent) {\r\n    let copy=[], i=0;\r\n    for (let n=parent.firstElementChild; n; n=n.nextElementSibling) {\r\n      copy[i++] = n;\r\n    }\r\n    return copy;\r\n  },\r\n\r\n  arrayCopy(a$) {\r\n    let l = a$.length;\r\n    let copy = new Array(l);\r\n    for (let i=0; i < l; i++) {\r\n      copy[i] = a$[i];\r\n    }\r\n    return copy;\r\n  },\r\n\r\n  saveChildNodes(node) {\r\n    tree.Logical.saveChildNodes(node);\r\n    if (!tree.Composed.hasParentNode(node)) {\r\n      tree.Composed.saveComposedData(node);\r\n      //tree.Composed.saveParentNode(node);\r\n    }\r\n    tree.Composed.saveChildNodes(node);\r\n  }\r\n\r\n};\r\n\r\ntree.Logical = {\r\n\r\n  hasParentNode(node) {\r\n    return Boolean(node.__dom && node.__dom.parentNode);\r\n  },\r\n\r\n  hasChildNodes(node) {\r\n    return Boolean(node.__dom && node.__dom.childNodes !== undefined);\r\n  },\r\n\r\n  getChildNodes(node) {\r\n    // note: we're distinguishing here between undefined and false-y:\r\n    // hasChildNodes uses undefined check to see if this element has logical\r\n    // children; the false-y check indicates whether or not we should rebuild\r\n    // the cached childNodes array.\r\n    return this.hasChildNodes(node) ? this._getChildNodes(node) :\r\n      tree.Composed.getChildNodes(node);\r\n  },\r\n\r\n  _getChildNodes(node) {\r\n    if (!node.__dom.childNodes) {\r\n      node.__dom.childNodes = [];\r\n      for (let n=this.getFirstChild(node); n; n=this.getNextSibling(n)) {\r\n        node.__dom.childNodes.push(n);\r\n      }\r\n    }\r\n    return node.__dom.childNodes;\r\n  },\r\n\r\n  // NOTE: __dom can be created under 2 conditions: (1) an element has a\r\n  // logical tree, or (2) an element is in a logical tree. In case (1), the\r\n  // element will store firstChild/lastChild, and in case (2), the element\r\n  // will store parentNode, nextSibling, previousSibling. This means that\r\n  // the mere existence of __dom is not enough to know if the requested\r\n  // logical data is available and instead we do an explicit undefined check.\r\n  getParentNode(node) {\r\n    return node.__dom && node.__dom.parentNode !== undefined ?\r\n      node.__dom.parentNode : tree.Composed.getParentNode(node);\r\n  },\r\n\r\n  getFirstChild(node) {\r\n    return node.__dom && node.__dom.firstChild !== undefined ?\r\n      node.__dom.firstChild : tree.Composed.getFirstChild(node);\r\n  },\r\n\r\n  getLastChild(node) {\r\n    return node.__dom && node.__dom.lastChild  !== undefined ?\r\n      node.__dom.lastChild : tree.Composed.getLastChild(node);\r\n  },\r\n\r\n  getNextSibling(node) {\r\n    return node.__dom && node.__dom.nextSibling  !== undefined ?\r\n      node.__dom.nextSibling : tree.Composed.getNextSibling(node);\r\n  },\r\n\r\n  getPreviousSibling(node) {\r\n    return node.__dom && node.__dom.previousSibling  !== undefined ?\r\n      node.__dom.previousSibling : tree.Composed.getPreviousSibling(node);\r\n  },\r\n\r\n  getFirstElementChild(node) {\r\n    return node.__dom && node.__dom.firstChild !== undefined ?\r\n      this._getFirstElementChild(node) :\r\n      tree.Composed.getFirstElementChild(node);\r\n  },\r\n\r\n  _getFirstElementChild(node) {\r\n    let n = node.__dom.firstChild;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = n.__dom.nextSibling;\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getLastElementChild(node) {\r\n    return node.__dom && node.__dom.lastChild !== undefined ?\r\n      this._getLastElementChild(node) :\r\n      tree.Composed.getLastElementChild(node);\r\n  },\r\n\r\n  _getLastElementChild(node) {\r\n    let n = node.__dom.lastChild;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = n.__dom.previousSibling;\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getNextElementSibling(node) {\r\n    return node.__dom && node.__dom.nextSibling !== undefined ?\r\n      this._getNextElementSibling(node) :\r\n      tree.Composed.getNextElementSibling(node);\r\n  },\r\n\r\n  _getNextElementSibling(node) {\r\n    let n = node.__dom.nextSibling;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = this.getNextSibling(n);\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getPreviousElementSibling(node) {\r\n    return node.__dom && node.__dom.previousSibling !== undefined ?\r\n      this._getPreviousElementSibling(node) :\r\n      tree.Composed.getPreviousElementSibling(node);\r\n  },\r\n\r\n  _getPreviousElementSibling(node) {\r\n    let n = node.__dom.previousSibling;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = this.getPreviousSibling(n);\r\n    }\r\n    return n;\r\n  },\r\n\r\n  // Capture the list of light children. It's important to do this before we\r\n  // start transforming the DOM into \"rendered\" state.\r\n  // Children may be added to this list dynamically. It will be treated as the\r\n  // source of truth for the light children of the element. This element's\r\n  // actual children will be treated as the rendered state once this function\r\n  // has been called.\r\n  saveChildNodes(node) {\r\n    if (!this.hasChildNodes(node)) {\r\n      node.__dom = node.__dom || {};\r\n      node.__dom.firstChild = node.firstChild;\r\n      node.__dom.lastChild = node.lastChild;\r\n      let c$ = node.__dom.childNodes = tree.arrayCopyChildNodes(node);\r\n      for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {\r\n        n.__dom = n.__dom || {};\r\n        n.__dom.parentNode = node;\r\n        n.__dom.nextSibling = c$[i+1] || null;\r\n        n.__dom.previousSibling = c$[i-1] || null;\r\n        utils.common.patchNode(n);\r\n      }\r\n    }\r\n  },\r\n\r\n  // TODO(sorvell): may need to patch saveChildNodes iff the tree has\r\n  // already been distributed.\r\n  // NOTE: ensure `node` is patched...\r\n  recordInsertBefore(node, container, ref_node) {\r\n    container.__dom.childNodes = null;\r\n    // handle document fragments\r\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n      let c$ = tree.arrayCopyChildNodes(node);\r\n      for (let i=0; i < c$.length; i++) {\r\n        this._linkNode(c$[i], container, ref_node);\r\n      }\r\n      // cleanup logical dom in doc fragment.\r\n      node.__dom = node.__dom || {};\r\n      node.__dom.firstChild = node.__dom.lastChild = null;\r\n      node.__dom.childNodes = null;\r\n    } else {\r\n      this._linkNode(node, container, ref_node);\r\n    }\r\n  },\r\n\r\n  _linkNode(node, container, ref_node) {\r\n    utils.common.patchNode(node);\r\n    ref_node = ref_node || null;\r\n    node.__dom = node.__dom || {};\r\n    container.__dom = container.__dom || {};\r\n    if (ref_node) {\r\n      ref_node.__dom = ref_node.__dom || {};\r\n    }\r\n    // update ref_node.previousSibling <-> node\r\n    node.__dom.previousSibling = ref_node ? ref_node.__dom.previousSibling :\r\n      container.__dom.lastChild;\r\n    if (node.__dom.previousSibling) {\r\n      node.__dom.previousSibling.__dom.nextSibling = node;\r\n    }\r\n    // update node <-> ref_node\r\n    node.__dom.nextSibling = ref_node;\r\n    if (node.__dom.nextSibling) {\r\n      node.__dom.nextSibling.__dom.previousSibling = node;\r\n    }\r\n    // update node <-> container\r\n    node.__dom.parentNode = container;\r\n    if (ref_node) {\r\n      if (ref_node === container.__dom.firstChild) {\r\n        container.__dom.firstChild = node;\r\n      }\r\n    } else {\r\n      container.__dom.lastChild = node;\r\n      if (!container.__dom.firstChild) {\r\n        container.__dom.firstChild = node;\r\n      }\r\n    }\r\n    // remove caching of childNodes\r\n    container.__dom.childNodes = null;\r\n  },\r\n\r\n  recordRemoveChild(node, container) {\r\n    node.__dom = node.__dom || {};\r\n    container.__dom = container.__dom || {};\r\n    if (node === container.__dom.firstChild) {\r\n      container.__dom.firstChild = node.__dom.nextSibling;\r\n    }\r\n    if (node === container.__dom.lastChild) {\r\n      container.__dom.lastChild = node.__dom.previousSibling;\r\n    }\r\n    let p = node.__dom.previousSibling;\r\n    let n = node.__dom.nextSibling;\r\n    if (p) {\r\n      p.__dom = p.__dom || {};\r\n      p.__dom.nextSibling = n;\r\n    }\r\n    if (n) {\r\n      n.__dom = n.__dom || {};\r\n      n.__dom.previousSibling = p;\r\n    }\r\n    // When an element is removed, logical data is no longer tracked.\r\n    // Explicitly set `undefined` here to indicate this. This is disginguished\r\n    // from `null` which is set if info is null.\r\n    node.__dom.parentNode = node.__dom.previousSibling =\r\n      node.__dom.nextSibling = null;\r\n    // remove caching of childNodes\r\n    container.__dom.childNodes = null;\r\n  }\r\n\r\n}\r\n\r\n\r\n// TODO(sorvell): composed tree manipulation is made available\r\n// (1) to maninpulate the composed tree, and (2) to track changes\r\n// to the tree for optional patching pluggability.\r\ntree.Composed = {\r\n\r\n  hasParentNode(node) {\r\n    return Boolean(node.__dom && node.__dom.$parentNode !== undefined);\r\n  },\r\n\r\n  hasChildNodes(node) {\r\n    return Boolean(node.__dom && node.__dom.$childNodes !== undefined);\r\n  },\r\n\r\n  getChildNodes(node) {\r\n    return this.hasChildNodes(node) ? this._getChildNodes(node) :\r\n      (!node.__patched && tree.arrayCopy(node.childNodes));\r\n  },\r\n\r\n  _getChildNodes(node) {\r\n    if (!node.__dom.$childNodes) {\r\n      node.__dom.$childNodes = [];\r\n      for (let n=node.__dom.$firstChild; n; n=n.__dom.$nextSibling) {\r\n        node.__dom.$childNodes.push(n);\r\n      }\r\n    }\r\n    return node.__dom.$childNodes;\r\n  },\r\n\r\n  getComposedChildNodes(node) {\r\n    return node.__dom.$childNodes;\r\n  },\r\n\r\n  getParentNode(node) {\r\n    return this.hasParentNode(node) ? node.__dom.$parentNode :\r\n      (!node.__patched && node.parentNode);\r\n  },\r\n\r\n  getFirstChild(node) {\r\n    return node.__patched ? node.__dom.$firstChild : node.firstChild;\r\n  },\r\n\r\n  getLastChild(node) {\r\n    return node.__patched ? node.__dom.$lastChild : node.lastChild;\r\n  },\r\n\r\n  getNextSibling(node) {\r\n    return node.__patched ? node.__dom.$nextSibling : node.nextSibling;\r\n  },\r\n\r\n  getPreviousSibling(node) {\r\n    return node.__patched ? node.__dom.$previousSibling : node.previousSibling;\r\n  },\r\n\r\n  getFirstElementChild(node) {\r\n    return node.__patched ? this._getFirstElementChild(node) :\r\n      node.firstElementChild;\r\n  },\r\n\r\n  _getFirstElementChild(node) {\r\n    let n = node.__dom.$firstChild;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = n.__dom.$nextSibling;\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getLastElementChild(node) {\r\n    return node.__patched ? this._getLastElementChild(node) :\r\n      node.lastElementChild;\r\n  },\r\n\r\n  _getLastElementChild(node) {\r\n    let n = node.__dom.$lastChild;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = n.__dom.$previousSibling;\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getNextElementSibling(node) {\r\n    return node.__patched ? this._getNextElementSibling(node) :\r\n      node.nextElementSibling;\r\n  },\r\n\r\n  _getNextElementSibling(node) {\r\n    let n = node.__dom.$nextSibling;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = this.getNextSibling(n);\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getPreviousElementSibling(node) {\r\n    return node.__patched ? this._getPreviousElementSibling(node) :\r\n      node.previousElementSibling;\r\n  },\r\n\r\n  _getPreviousElementSibling(node) {\r\n    let n = node.__dom.$previousSibling;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = this.getPreviousSibling(n);\r\n    }\r\n    return n;\r\n  },\r\n\r\n  saveChildNodes(node) {\r\n    if (!this.hasChildNodes(node)) {\r\n      node.__dom = node.__dom || {};\r\n      node.__dom.$firstChild = node.firstChild;\r\n      node.__dom.$lastChild = node.lastChild;\r\n      let c$ = node.__dom.$childNodes = tree.arrayCopyChildNodes(node);\r\n      for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {\r\n        this.saveComposedData(n);\r\n      }\r\n    }\r\n  },\r\n\r\n  saveComposedData(node) {\r\n    node.__dom = node.__dom || {};\r\n    if (node.__dom.$parentNode === undefined) {\r\n      node.__dom.$parentNode = node.parentNode;\r\n    }\r\n    if (node.__dom.$nextSibling === undefined) {\r\n      node.__dom.$nextSibling = node.nextSibling;\r\n    }\r\n    if (node.__dom.$previousSibling === undefined) {\r\n      node.__dom.$previousSibling = node.previousSibling;\r\n    }\r\n  },\r\n\r\n  recordInsertBefore(node, container, ref_node) {\r\n    container.__dom.$childNodes = null;\r\n    // handle document fragments\r\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n      // TODO(sorvell): remember this for patching:\r\n      // the act of setting this info can affect patched nodes\r\n      // getters; therefore capture childNodes before patching.\r\n      for (let n=this.getFirstChild(node); n; n=this.getNextSibling(n)) {\r\n        this._linkNode(n, container, ref_node);\r\n      }\r\n    } else {\r\n      this._linkNode(node, container, ref_node);\r\n    }\r\n  },\r\n\r\n  _linkNode(node, container, ref_node) {\r\n    node.__dom = node.__dom || {};\r\n    container.__dom = container.__dom || {};\r\n    if (ref_node) {\r\n      ref_node.__dom = ref_node.__dom || {};\r\n    }\r\n    // update ref_node.previousSibling <-> node\r\n    node.__dom.$previousSibling = ref_node ? ref_node.__dom.$previousSibling :\r\n      container.__dom.$lastChild;\r\n    if (node.__dom.$previousSibling) {\r\n      node.__dom.$previousSibling.__dom.$nextSibling = node;\r\n    }\r\n    // update node <-> ref_node\r\n    node.__dom.$nextSibling = ref_node;\r\n    if (node.__dom.$nextSibling) {\r\n      node.__dom.$nextSibling.__dom.$previousSibling = node;\r\n    }\r\n    // update node <-> container\r\n    node.__dom.$parentNode = container;\r\n    if (ref_node) {\r\n      if (ref_node === container.__dom.$firstChild) {\r\n        container.__dom.$firstChild = node;\r\n      }\r\n    } else {\r\n      container.__dom.$lastChild = node;\r\n      if (!container.__dom.$firstChild) {\r\n        container.__dom.$firstChild = node;\r\n      }\r\n    }\r\n    // remove caching of childNodes\r\n    container.__dom.$childNodes = null;\r\n  },\r\n\r\n  recordRemoveChild(node, container) {\r\n    node.__dom = node.__dom || {};\r\n    container.__dom = container.__dom || {};\r\n    if (node === container.__dom.$firstChild) {\r\n      container.__dom.$firstChild = node.__dom.$nextSibling;\r\n    }\r\n    if (node === container.__dom.$lastChild) {\r\n      container.__dom.$lastChild = node.__dom.$previousSibling;\r\n    }\r\n    let p = node.__dom.$previousSibling;\r\n    let n = node.__dom.$nextSibling;\r\n    if (p) {\r\n      p.__dom = p.__dom || {};\r\n      p.__dom.$nextSibling = n;\r\n    }\r\n    if (n) {\r\n      n.__dom = n.__dom || {};\r\n      n.__dom.$previousSibling = p;\r\n    }\r\n    node.__dom.$parentNode = node.__dom.$previousSibling =\r\n      node.__dom.$nextSibling = null;\r\n    // remove caching of childNodes\r\n    container.__dom.$childNodes = null;\r\n  },\r\n\r\n  clearChildNodes(node) {\r\n    let c$ = this.getChildNodes(node);\r\n    for (let i=0, c; i < c$.length; i++) {\r\n      c = c$[i];\r\n      this.recordRemoveChild(c, node);\r\n      nativeRemoveChild.call(node, c)\r\n    }\r\n  },\r\n\r\n  saveParentNode(node) {\r\n    node.__dom = node.__dom || {};\r\n    node.__dom.$parentNode = node.parentNode;\r\n  },\r\n\r\n  insertBefore(parentNode, newChild, refChild) {\r\n    this.saveChildNodes(parentNode);\r\n    // remove from current location.\r\n    this._addChild(parentNode, newChild, refChild);\r\n    return nativeInsertBefore.call(parentNode, newChild, refChild || null);\r\n  },\r\n\r\n  appendChild(parentNode, newChild) {\r\n    this.saveChildNodes(parentNode);\r\n    this._addChild(parentNode, newChild);\r\n    return nativeAppendChild.call(parentNode, newChild);\r\n  },\r\n\r\n  removeChild(parentNode, node) {\r\n    let currentParent = this.getParentNode(node);\r\n    this.saveChildNodes(parentNode);\r\n    this._removeChild(parentNode, node);\r\n    if (currentParent === parentNode) {\r\n      return nativeRemoveChild.call(parentNode, node);\r\n    }\r\n  },\r\n\r\n  _addChild(parentNode, newChild, refChild) {\r\n    let isFrag = (newChild.nodeType === Node.DOCUMENT_FRAGMENT_NODE);\r\n    let oldParent = this.getParentNode(newChild);\r\n    if (oldParent) {\r\n      this._removeChild(oldParent, newChild);\r\n    }\r\n    if (isFrag) {\r\n      let c$ = this.getChildNodes(newChild);\r\n      for (let i=0; i < c$.length; i++) {\r\n        let c = c$[i];\r\n        // unlink document fragment children\r\n        this._removeChild(newChild, c);\r\n        this.recordInsertBefore(c, parentNode, refChild);\r\n      }\r\n    } else {\r\n      this.recordInsertBefore(newChild, parentNode, refChild);\r\n    }\r\n  },\r\n\r\n  _removeChild(parentNode, node) {\r\n    this.recordRemoveChild(node, parentNode);\r\n  }\r\n\r\n};\r\n\r\n// for testing...\r\nlet descriptors = {};\r\nexport function getNativeProperty(element, property) {\r\n  if (!descriptors[property]) {\r\n    descriptors[property] = Object.getOwnPropertyDescriptor(\r\n      HTMLElement.prototype, property) ||\r\n    Object.getOwnPropertyDescriptor(\r\n      Element.prototype, property) ||\r\n    Object.getOwnPropertyDescriptor(\r\n      Node.prototype, property);\r\n  }\r\n  return descriptors[property].get.call(element);\r\n}\r\n\r\n// for testing...\r\nfunction assertNative(element, property, tracked) {\r\n  let native = getNativeProperty(element, property);\r\n  if (native != tracked && element.__patched) {\r\n    window.console.warn('tracked', tracked, 'native', native);\r\n  }\r\n  return tracked;\r\n}","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nimport {calculateSplices} from './array-splice'\r\nimport * as utils from './utils'\r\nimport {tree} from './tree'\r\nimport Distributor from './distributor'\r\n\r\n/**\r\n  Implements a pared down version of ShadowDOM's scoping, which is easy to\r\n  polyfill across browsers.\r\n*/\r\nexport class ShadyRoot {\r\n\r\n  constructor(host) {\r\n    if (!host) {\r\n      throw 'Must provide a host';\r\n    }\r\n    // NOTE: this strange construction is necessary because\r\n    // DocumentFragment cannot be subclassed on older browsers.\r\n    let frag = document.createDocumentFragment();\r\n    frag.__proto__ = ShadyFragmentMixin;\r\n    frag._init(host);\r\n    return frag;\r\n  }\r\n\r\n}\r\n\r\nlet ShadyMixin = {\r\n\r\n  _init(host) {\r\n    // NOTE: set a fake local name so this element can be\r\n    // distinguished from a DocumentFragment when patching.\r\n    // FF doesn't allow this to be `localName`\r\n    this.__localName = 'ShadyRoot';\r\n    // root <=> host\r\n    host.shadyRoot = this;\r\n    this.host = host;\r\n    // logical dom setup\r\n    tree.Logical.saveChildNodes(host);\r\n    tree.Logical.saveChildNodes(this);\r\n    // state flags\r\n    this._clean = true;\r\n    this._hasRendered = false;\r\n    this._distributor = new Distributor(this);\r\n    this.update();\r\n  },\r\n\r\n  // async render the \"top\" distributor (this is all that is needed to\r\n  // distribute this host).\r\n  update() {\r\n    // TODO(sorvell): instead the root should always be enqueued to helps record that it is dirty.\r\n    // Then, in `render`, the top most (in the distribution tree) \"dirty\" root should be rendered.\r\n    let distributionRoot = this._findDistributionRoot(this.host);\r\n    //console.log('update from', this.host, 'root', distributionRoot.host, distributionRoot._clean);\r\n    if (distributionRoot._clean) {\r\n      distributionRoot._clean = false;\r\n      enqueue(function() {\r\n        distributionRoot.render();\r\n      });\r\n    }\r\n  },\r\n\r\n  // TODO(sorvell): this may not return a shadowRoot (for example if the element is in a docFragment)\r\n  // this should only return a shadowRoot.\r\n  // returns the host that's the top of this host's distribution tree\r\n  _findDistributionRoot(element) {\r\n    let root = element.shadyRoot;\r\n    while (element && this._elementNeedsDistribution(element)) {\r\n      root = element.getRootNode();\r\n      element = root && root.host;\r\n    }\r\n    return root;\r\n  },\r\n\r\n  // Return true if a host's children includes\r\n  // an insertion point that selects selectively\r\n  _elementNeedsDistribution(element) {\r\n    let c$ = tree.Logical.getChildNodes(element);\r\n    for (let i=0, c; i < c$.length; i++) {\r\n      c = c$[i];\r\n      if (this._distributor.isInsertionPoint(c)) {\r\n        return element.getRootNode();\r\n      }\r\n    }\r\n  },\r\n\r\n  render() {\r\n    if (!this._clean) {\r\n      this._clean = true;\r\n      if (!this._skipUpdateInsertionPoints) {\r\n        this.updateInsertionPoints();\r\n      } else if (!this._hasRendered) {\r\n        this._insertionPoints = [];\r\n      }\r\n      this._skipUpdateInsertionPoints = false;\r\n      // TODO(sorvell): previous ShadyDom had a fast path here\r\n      // that would avoid distribution for initial render if\r\n      // no insertion points exist. We cannot currently do this because\r\n      // it relies on elements being in the physical shadowRoot element\r\n      // so that native methods will be used. The current append code\r\n      // simply provokes distribution in this case and does not put the\r\n      // nodes in the shadowRoot. This could be done but we'll need to\r\n      // consider if the special processing is worth the perf gain.\r\n      // if (!this._hasRendered && !this._insertionPoints.length) {\r\n      //   tree.Composed.clearChildNodes(this.host);\r\n      //   tree.Composed.appendChild(this.host, this);\r\n      // } else {\r\n      // logical\r\n      this.distribute();\r\n      // physical\r\n      this.compose();\r\n      this._hasRendered = true;\r\n    }\r\n  },\r\n\r\n  forceRender() {\r\n    this._clean = false;\r\n    this.render();\r\n  },\r\n\r\n  distribute() {\r\n    let dirtyRoots = this._distributor.distribute();\r\n    for (let i=0; i<dirtyRoots.length; i++) {\r\n      dirtyRoots[i].forceRender();\r\n    }\r\n  },\r\n\r\n  updateInsertionPoints() {\r\n    let i$ = this.__insertionPoints;\r\n    // if any insertion points have been removed, clear their distribution info\r\n    if (i$) {\r\n      for (let i=0, c; i < i$.length; i++) {\r\n        c = i$[i];\r\n        if (c.getRootNode() !== this) {\r\n          this._distributor.clearAssignedSlots(c);\r\n        }\r\n      }\r\n    }\r\n    i$ = this._insertionPoints = this._distributor.getInsertionPoints();\r\n    // ensure insertionPoints's and their parents have logical dom info.\r\n    // save logical tree info\r\n    // a. for shadyRoot\r\n    // b. for insertion points (fallback)\r\n    // c. for parents of insertion points\r\n    for (let i=0, c; i < i$.length; i++) {\r\n      c = i$[i];\r\n      tree.Logical.saveChildNodes(c);\r\n      tree.Logical.saveChildNodes(tree.Logical.getParentNode(c));\r\n    }\r\n  },\r\n\r\n  get _insertionPoints() {\r\n    if (!this.__insertionPoints) {\r\n      this.updateInsertionPoints();\r\n    }\r\n    return this.__insertionPoints || (this.__insertionPoints = []);\r\n  },\r\n\r\n  set _insertionPoints(insertionPoints) {\r\n    this.__insertionPoints = insertionPoints;\r\n  },\r\n\r\n  hasInsertionPoint() {\r\n    return this._distributor.hasInsertionPoint();\r\n  },\r\n\r\n  compose() {\r\n    // compose self\r\n    // note: it's important to mark this clean before distribution\r\n    // so that attachment that provokes additional distribution (e.g.\r\n    // adding something to your parentNode) works\r\n    this._composeTree();\r\n    // TODO(sorvell): See fast paths here in Polymer v1\r\n    // (these seem unnecessary)\r\n  },\r\n\r\n  // Reify dom such that it is at its correct rendering position\r\n  // based on logical distribution.\r\n  _composeTree() {\r\n    this._updateChildNodes(this.host, this._composeNode(this.host));\r\n    let p$ = this._insertionPoints || [];\r\n    for (let i=0, l=p$.length, p, parent; (i<l) && (p=p$[i]); i++) {\r\n      parent = tree.Logical.getParentNode(p);\r\n      if ((parent !== this.host) && (parent !== this)) {\r\n        this._updateChildNodes(parent, this._composeNode(parent));\r\n      }\r\n    }\r\n  },\r\n\r\n  // Returns the list of nodes which should be rendered inside `node`.\r\n  _composeNode(node) {\r\n    let children = [];\r\n    let c$ = tree.Logical.getChildNodes(node.shadyRoot || node);\r\n    for (let i = 0; i < c$.length; i++) {\r\n      let child = c$[i];\r\n      if (this._distributor.isInsertionPoint(child)) {\r\n        let distributedNodes = child._distributedNodes ||\r\n          (child._distributedNodes = []);\r\n        for (let j = 0; j < distributedNodes.length; j++) {\r\n          let distributedNode = distributedNodes[j];\r\n          if (this.isFinalDestination(child, distributedNode)) {\r\n            children.push(distributedNode);\r\n          }\r\n        }\r\n      } else {\r\n        children.push(child);\r\n      }\r\n    }\r\n    return children;\r\n  },\r\n\r\n  isFinalDestination(insertionPoint, node) {\r\n    return this._distributor.isFinalDestination(\r\n      insertionPoint, node);\r\n  },\r\n\r\n  // Ensures that the rendered node list inside `container` is `children`.\r\n  _updateChildNodes(container, children) {\r\n    let composed = tree.Composed.getChildNodes(container);\r\n    let splices = calculateSplices(children, composed);\r\n    // process removals\r\n    for (let i=0, d=0, s; (i<splices.length) && (s=splices[i]); i++) {\r\n      for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\r\n        // check if the node is still where we expect it is before trying\r\n        // to remove it; this can happen if we move a node and\r\n        // then schedule its previous host for distribution resulting in\r\n        // the node being removed here.\r\n        if (tree.Composed.getParentNode(n) === container) {\r\n          tree.Composed.removeChild(container, n);\r\n        }\r\n        composed.splice(s.index + d, 1);\r\n      }\r\n      d -= s.addedCount;\r\n    }\r\n    // process adds\r\n    for (let i=0, s, next; (i<splices.length) && (s=splices[i]); i++) { //eslint-disable-line no-redeclare\r\n      next = composed[s.index];\r\n      for (let j=s.index, n; j < s.index + s.addedCount; j++) {\r\n        n = children[j];\r\n        tree.Composed.insertBefore(container, n, next);\r\n        // TODO(sorvell): is this splice strictly needed?\r\n        composed.splice(j, 0, n);\r\n      }\r\n    }\r\n  },\r\n\r\n  getInsertionPointTag() {\r\n    return this._distributor.insertionPointTag;\r\n  }\r\n\r\n}\r\n\r\nlet ShadyFragmentMixin = Object.create(DocumentFragment.prototype);\r\nutils.extend(ShadyFragmentMixin, ShadyMixin);\r\n\r\n// let needsUpgrade = window.CustomElements && !CustomElements.useNative;\r\n\r\n// function upgradeLogicalChildren(children) {\r\n//   if (needsUpgrade && children) {\r\n//     for (let i=0; i < children.length; i++) {\r\n//       CustomElements.upgrade(children[i]);\r\n//     }\r\n//   }\r\n// }\r\n\r\n// render enqueuer/flusher\r\nlet customElements = window.customElements;\r\nlet flushList = [];\r\nlet scheduled;\r\nlet flushCount = 0;\r\nlet flushMax = 100;\r\nexport function enqueue(callback) {\r\n  if (!scheduled) {\r\n    scheduled = true;\r\n    utils.promish.then(flush);\r\n  }\r\n  flushList.push(callback);\r\n}\r\n\r\nexport function flush() {\r\n  scheduled = false;\r\n  flushCount++;\r\n  while (flushList.length) {\r\n    flushList.shift()();\r\n  }\r\n  if (customElements && customElements.flush) {\r\n    customElements.flush();\r\n  }\r\n  // continue flushing after elements are upgraded...\r\n  const isFlushedMaxed = (flushCount > flushMax);\r\n  if (flushList.length && !isFlushedMaxed) {\r\n      flush();\r\n  }\r\n  flushCount = 0;\r\n  if (isFlushedMaxed) {\r\n    throw new Error('Loop detected in ShadyDOM distribution, aborting.')\r\n  }\r\n}\r\n\r\nflush.list = flushList;","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\n// Cribbed from ShadowDOM polyfill\r\n// https://github.com/webcomponents/webcomponentsjs/blob/master/src/ShadowDOM/wrappers/HTMLElement.js#L28\r\n/////////////////////////////////////////////////////////////////////////////\r\n// innerHTML and outerHTML\r\n\r\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#escapingString\r\nlet escapeAttrRegExp = /[&\\u00A0\"]/g;\r\nlet escapeDataRegExp = /[&\\u00A0<>]/g;\r\n\r\nfunction escapeReplace(c) {\r\n  switch (c) {\r\n    case '&':\r\n      return '&amp;';\r\n    case '<':\r\n      return '&lt;';\r\n    case '>':\r\n      return '&gt;';\r\n    case '\"':\r\n      return '&quot;';\r\n    case '\\u00A0':\r\n      return '&nbsp;';\r\n  }\r\n}\r\n\r\nfunction escapeAttr(s) {\r\n  return s.replace(escapeAttrRegExp, escapeReplace);\r\n}\r\n\r\nfunction escapeData(s) {\r\n  return s.replace(escapeDataRegExp, escapeReplace);\r\n}\r\n\r\nfunction makeSet(arr) {\r\n  let set = {};\r\n  for (let i = 0; i < arr.length; i++) {\r\n    set[arr[i]] = true;\r\n  }\r\n  return set;\r\n}\r\n\r\n// http://www.whatwg.org/specs/web-apps/current-work/#void-elements\r\nlet voidElements = makeSet([\r\n  'area',\r\n  'base',\r\n  'br',\r\n  'col',\r\n  'command',\r\n  'embed',\r\n  'hr',\r\n  'img',\r\n  'input',\r\n  'keygen',\r\n  'link',\r\n  'meta',\r\n  'param',\r\n  'source',\r\n  'track',\r\n  'wbr'\r\n]);\r\n\r\nlet plaintextParents = makeSet([\r\n  'style',\r\n  'script',\r\n  'xmp',\r\n  'iframe',\r\n  'noembed',\r\n  'noframes',\r\n  'plaintext',\r\n  'noscript'\r\n]);\r\n\r\nexport function getOuterHTML(node, parentNode, composed) {\r\n  switch (node.nodeType) {\r\n    case Node.ELEMENT_NODE: {\r\n      let tagName = node.localName;\r\n      let s = '<' + tagName;\r\n      let attrs = node.attributes;\r\n      for (let i = 0, attr; (attr = attrs[i]); i++) {\r\n        s += ' ' + attr.name + '=\"' + escapeAttr(attr.value) + '\"';\r\n      }\r\n      s += '>';\r\n      if (voidElements[tagName]) {\r\n        return s;\r\n      }\r\n      return s + getInnerHTML(node, composed) + '</' + tagName + '>';\r\n    }\r\n    case Node.TEXT_NODE: {\r\n      let data = node.data;\r\n      if (parentNode && plaintextParents[parentNode.localName]) {\r\n        return data;\r\n      }\r\n      return escapeData(data);\r\n    }\r\n    case Node.COMMENT_NODE: {\r\n      return '<!--' + node.data + '-->';\r\n    }\r\n    default: {\r\n      window.console.error(node);\r\n      throw new Error('not implemented');\r\n    }\r\n  }\r\n}\r\n\r\nexport function getInnerHTML(node, composed) {\r\n  if (node.localName === 'template') {\r\n    node = node.content;\r\n  }\r\n  let s = '';\r\n  let c$ = composed ? composed(node) : node.childNodes;\r\n  for (let i=0, l=c$.length, child; (i<l) && (child=c$[i]); i++) {\r\n    s += getOuterHTML(child, node, composed);\r\n  }\r\n  return s;\r\n}","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nimport * as utils from './utils'\r\nimport {getInnerHTML} from './innerHTML'\r\nimport {tree} from './tree'\r\n\r\nlet mixinImpl = {\r\n\r\n  // Try to add node. Record logical info, track insertion points, perform\r\n  // distribution iff needed. Return true if the add is handled.\r\n  addNode(container, node, ref_node) {\r\n    let ownerRoot = this.ownerShadyRootForNode(container);\r\n    if (ownerRoot) {\r\n      // optimization: special insertion point tracking\r\n      if (node.__noInsertionPoint) {\r\n        ownerRoot._skipUpdateInsertionPoints = true;\r\n      }\r\n      // note: we always need to see if an insertion point is added\r\n      // since this saves logical tree info; however, invalidation state\r\n      // needs\r\n      let ipAdded = this._maybeAddInsertionPoint(node, container, ownerRoot);\r\n      // invalidate insertion points IFF not already invalid!\r\n      if (ipAdded) {\r\n        ownerRoot._skipUpdateInsertionPoints = false;\r\n      }\r\n      this._addedNode(node, ownerRoot);\r\n    }\r\n    if (tree.Logical.hasChildNodes(container)) {\r\n      tree.Logical.recordInsertBefore(node, container, ref_node);\r\n    }\r\n    // if not distributing and not adding to host, do a fast path addition\r\n    let handled = this._maybeDistribute(node, container, ownerRoot) ||\r\n      container.shadyRoot;\r\n    return handled;\r\n  },\r\n\r\n  // Try to remove node: update logical info and perform distribution iff\r\n  // needed. Return true if the removal has been handled.\r\n  // note that it's possible for both the node's host and its parent\r\n  // to require distribution... both cases are handled here.\r\n  removeNode(node) {\r\n    // important that we want to do this only if the node has a logical parent\r\n    let logicalParent = tree.Logical.hasParentNode(node) &&\r\n      tree.Logical.getParentNode(node);\r\n    let distributed;\r\n    let ownerRoot = this.ownerShadyRootForNode(node);\r\n    if (logicalParent) {\r\n      // distribute node's parent iff needed\r\n      distributed = this.maybeDistributeParent(node);\r\n      tree.Logical.recordRemoveChild(node, logicalParent);\r\n      // remove node from root and distribute it iff needed\r\n      if (ownerRoot && (this._removeDistributedChildren(ownerRoot, node) ||\r\n        logicalParent.localName === ownerRoot.getInsertionPointTag())) {\r\n        ownerRoot._skipUpdateInsertionPoints = false;\r\n        ownerRoot.update();\r\n      }\r\n    }\r\n    this._removeOwnerShadyRoot(node);\r\n    if (ownerRoot) {\r\n      this._removedNode(node, ownerRoot);\r\n    }\r\n    return distributed;\r\n  },\r\n\r\n\r\n  _scheduleObserver(node, addedNode, removedNode) {\r\n    let observer = node.__dom && node.__dom.observer;\r\n    if (observer) {\r\n      if (addedNode) {\r\n        observer.addedNodes.push(addedNode);\r\n      }\r\n      if (removedNode) {\r\n        observer.removedNodes.push(removedNode);\r\n      }\r\n      observer.schedule();\r\n    }\r\n  },\r\n\r\n  removeNodeFromParent(node, parent) {\r\n    if (parent) {\r\n      this._scheduleObserver(parent, null, node);\r\n      this.removeNode(node);\r\n    } else {\r\n      this._removeOwnerShadyRoot(node);\r\n    }\r\n  },\r\n\r\n  _hasCachedOwnerRoot(node) {\r\n    return Boolean(node.__ownerShadyRoot !== undefined);\r\n  },\r\n\r\n  getRootNode(node) {\r\n    if (!node || !node.nodeType) {\r\n      return;\r\n    }\r\n    let root = node.__ownerShadyRoot;\r\n    if (root === undefined) {\r\n      if (utils.isShadyRoot(node)) {\r\n        root = node;\r\n      } else {\r\n        let parent = tree.Logical.getParentNode(node);\r\n        root = parent ? this.getRootNode(parent) : node;\r\n      }\r\n      // memo-ize result for performance but only memo-ize\r\n      // result if node is in the document. This avoids a problem where a root\r\n      // can be cached while an element is inside a fragment.\r\n      // If this happens and we cache the result, the value can become stale\r\n      // because for perf we avoid processing the subtree of added fragments.\r\n      if (document.documentElement.contains(node)) {\r\n        node.__ownerShadyRoot = root;\r\n      }\r\n    }\r\n    return root;\r\n  },\r\n\r\n  ownerShadyRootForNode(node) {\r\n    let root = this.getRootNode(node);\r\n    if (utils.isShadyRoot(root)) {\r\n      return root;\r\n    }\r\n  },\r\n\r\n  _maybeDistribute(node, container, ownerRoot) {\r\n    // TODO(sorvell): technically we should check non-fragment nodes for\r\n    // <content> children but since this case is assumed to be exceedingly\r\n    // rare, we avoid the cost and will address with some specific api\r\n    // when the need arises.  For now, the user must call\r\n    // distributeContent(true), which updates insertion points manually\r\n    // and forces distribution.\r\n    let insertionPointTag = ownerRoot && ownerRoot.getInsertionPointTag() || '';\r\n    let fragContent = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) &&\r\n      !node.__noInsertionPoint &&\r\n      insertionPointTag && node.querySelector(insertionPointTag);\r\n    let wrappedContent = fragContent &&\r\n      (tree.Logical.getParentNode(fragContent).nodeType !==\r\n      Node.DOCUMENT_FRAGMENT_NODE);\r\n    let hasContent = fragContent || (node.localName === insertionPointTag);\r\n    // There are 3 possible cases where a distribution may need to occur:\r\n    // 1. <content> being inserted (the host of the shady root where\r\n    //    content is inserted needs distribution)\r\n    // 2. children being inserted into parent with a shady root (parent\r\n    //    needs distribution)\r\n    // 3. container is an insertionPoint\r\n    if (hasContent || (container.localName === insertionPointTag)) {\r\n      if (ownerRoot) {\r\n        // note, insertion point list update is handled after node\r\n        // mutations are complete\r\n        ownerRoot.update();\r\n      }\r\n    }\r\n    let needsDist = this._nodeNeedsDistribution(container);\r\n    if (needsDist) {\r\n      container.shadyRoot.update();\r\n    }\r\n    // Return true when distribution will fully handle the composition\r\n    // Note that if a content was being inserted that was wrapped by a node,\r\n    // and the parent does not need distribution, return false to allow\r\n    // the nodes to be added directly, after which children may be\r\n    // distributed and composed into the wrapping node(s)\r\n    return needsDist || (hasContent && !wrappedContent);\r\n  },\r\n\r\n  /* note: parent argument is required since node may have an out\r\n  of date parent at this point; returns true if a <content> is being added */\r\n  _maybeAddInsertionPoint(node, parent, root) {\r\n    let added;\r\n    let insertionPointTag = root.getInsertionPointTag();\r\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE &&\r\n      !node.__noInsertionPoint) {\r\n      let c$ = node.querySelectorAll(insertionPointTag);\r\n      for (let i=0, n, np, na; (i<c$.length) && (n=c$[i]); i++) {\r\n        np = tree.Logical.getParentNode(n);\r\n        // don't allow node's parent to be fragment itself\r\n        if (np === node) {\r\n          np = parent;\r\n        }\r\n        na = this._maybeAddInsertionPoint(n, np, root);\r\n        added = added || na;\r\n      }\r\n    } else if (node.localName === insertionPointTag) {\r\n      tree.Logical.saveChildNodes(parent);\r\n      tree.Logical.saveChildNodes(node);\r\n      added = true;\r\n    }\r\n    return added;\r\n  },\r\n\r\n  _nodeNeedsDistribution(node) {\r\n    return node && node.shadyRoot &&\r\n      node.shadyRoot.hasInsertionPoint();\r\n  },\r\n\r\n  // TODO(sorvell): needed for style scoping, use MO?\r\n  _addedNode() {},\r\n  _removedNode() {},\r\n  /*\r\n  _addedNode(node, root) {\r\n    // if (ShadyDOM.addedNode) {\r\n    //   ShadyDOM.addedNode(node, root);\r\n    // }\r\n  },\r\n\r\n  _removedNode(node, root) {\r\n    if (ShadyDOM.removedNode) {\r\n      ShadyDOM.removedNode(node, root);\r\n    }\r\n  },\r\n  */\r\n\r\n  _removeDistributedChildren(root, container) {\r\n    let hostNeedsDist;\r\n    let ip$ = root._insertionPoints;\r\n    for (let i=0; i<ip$.length; i++) {\r\n      let insertionPoint = ip$[i];\r\n      if (this._contains(container, insertionPoint)) {\r\n        let dc$ = insertionPoint.assignedNodes({flatten: true});\r\n        for (let j=0; j<dc$.length; j++) {\r\n          hostNeedsDist = true;\r\n          let node = dc$[j];\r\n          let parent = tree.Composed.getParentNode(node);\r\n          if (parent) {\r\n            tree.Composed.removeChild(parent, node);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return hostNeedsDist;\r\n  },\r\n\r\n  _contains(container, node) {\r\n    while (node) {\r\n      if (node == container) {\r\n        return true;\r\n      }\r\n      node = tree.Logical.getParentNode(node);\r\n    }\r\n  },\r\n\r\n  _removeOwnerShadyRoot(node) {\r\n    // optimization: only reset the tree if node is actually in a root\r\n    if (this._hasCachedOwnerRoot(node)) {\r\n      let c$ = tree.Logical.getChildNodes(node);\r\n      for (let i=0, l=c$.length, n; (i<l) && (n=c$[i]); i++) {\r\n        this._removeOwnerShadyRoot(n);\r\n      }\r\n    }\r\n    node.__ownerShadyRoot = undefined;\r\n  },\r\n\r\n  // TODO(sorvell): This will fail if distribution that affects this\r\n  // question is pending; this is expected to be exceedingly rare, but if\r\n  // the issue comes up, we can force a flush in this case.\r\n  firstComposedNode(insertionPoint) {\r\n    let n$ = insertionPoint.assignedNodes({flatten: true});\r\n    let root = this.getRootNode(insertionPoint);\r\n    for (let i=0, l=n$.length, n; (i<l) && (n=n$[i]); i++) {\r\n      // means that we're composed to this spot.\r\n      if (root.isFinalDestination(insertionPoint, n)) {\r\n        return n;\r\n      }\r\n    }\r\n  },\r\n\r\n  clearNode(node) {\r\n    while (node.firstChild) {\r\n      node.removeChild(node.firstChild);\r\n    }\r\n  },\r\n\r\n  maybeDistributeParent(node) {\r\n    let parent = tree.Logical.getParentNode(node);\r\n    if (this._nodeNeedsDistribution(parent)) {\r\n      parent.shadyRoot.update();\r\n      return true;\r\n    }\r\n  },\r\n\r\n  maybeDistributeAttributeChange(node, name) {\r\n    let distribute = (node.localName === 'slot' && name === 'name');\r\n    if (distribute) {\r\n      let root = this.getRootNode(node);\r\n      if (root.update) {\r\n        root.update();\r\n      }\r\n    }\r\n  },\r\n\r\n  // NOTE: `query` is used primarily for ShadyDOM's querySelector impl,\r\n  // but it's also generally useful to recurse through the element tree\r\n  // and is used by Polymer's styling system.\r\n  query(node, matcher, halter) {\r\n    let list = [];\r\n    this._queryElements(tree.Logical.getChildNodes(node), matcher,\r\n      halter, list);\r\n    return list;\r\n  },\r\n\r\n  _queryElements(elements, matcher, halter, list) {\r\n    for (let i=0, l=elements.length, c; (i<l) && (c=elements[i]); i++) {\r\n      if (c.nodeType === Node.ELEMENT_NODE &&\r\n          this._queryElement(c, matcher, halter, list)) {\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n\r\n  _queryElement(node, matcher, halter, list) {\r\n    let result = matcher(node);\r\n    if (result) {\r\n      list.push(node);\r\n    }\r\n    if (halter && halter(result)) {\r\n      return result;\r\n    }\r\n    this._queryElements(tree.Logical.getChildNodes(node), matcher,\r\n      halter, list);\r\n  },\r\n\r\n  activeElementForNode(node) {\r\n    let active = document.activeElement;\r\n    if (!active) {\r\n      return null;\r\n    }\r\n    let isShadyRoot = !!(utils.isShadyRoot(node));\r\n    if (node !== document) {\r\n      // If this node isn't a document or shady root, then it doesn't have\r\n      // an active element.\r\n      if (!isShadyRoot) {\r\n        return null;\r\n      }\r\n      // If this shady root's host is the active element or the active\r\n      // element is not a descendant of the host (in the composed tree),\r\n      // then it doesn't have an active element.\r\n      if (node.host === active ||\r\n          !node.host.contains(active)) {\r\n        return null;\r\n      }\r\n    }\r\n    // This node is either the document or a shady root of which the active\r\n    // element is a (composed) descendant of its host; iterate upwards to\r\n    // find the active element's most shallow host within it.\r\n    let activeRoot = this.ownerShadyRootForNode(active);\r\n    while (activeRoot && activeRoot !== node) {\r\n      active = activeRoot.host;\r\n      activeRoot = this.ownerShadyRootForNode(active);\r\n    }\r\n    if (node === document) {\r\n      // This node is the document, so activeRoot should be null.\r\n      return activeRoot ? null : active;\r\n    } else {\r\n      // This node is a non-document shady root, and it should be\r\n      // activeRoot.\r\n      return activeRoot === node ? active : null;\r\n    }\r\n  }\r\n\r\n};\r\n\r\nlet nativeCloneNode = Element.prototype.cloneNode;\r\nlet nativeImportNode = Document.prototype.importNode;\r\nlet nativeSetAttribute = Element.prototype.setAttribute;\r\nlet nativeRemoveAttribute = Element.prototype.removeAttribute;\r\n\r\nlet NodeMixin = {};\r\n\r\nObject.defineProperties(NodeMixin, {\r\n\r\n  parentElement: {\r\n    get() {\r\n      return tree.Logical.getParentNode(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  parentNode: {\r\n    get() {\r\n      return tree.Logical.getParentNode(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  nextSibling: {\r\n    get() {\r\n      return tree.Logical.getNextSibling(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  previousSibling: {\r\n    get() {\r\n      return tree.Logical.getPreviousSibling(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  nextElementSibling: {\r\n    get() {\r\n      return tree.Logical.getNextElementSibling(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  previousElementSibling: {\r\n    get() {\r\n      return tree.Logical.getPreviousElementSibling(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  assignedSlot: {\r\n    get() {\r\n      return this._assignedSlot;\r\n    },\r\n    configurable: true\r\n  }\r\n});\r\n\r\nlet FragmentMixin = {\r\n\r\n  appendChild(node) {\r\n    return this.insertBefore(node);\r\n  },\r\n\r\n  // cases in which we may not be able to just do standard native call\r\n  // 1. container has a shadyRoot (needsDistribution IFF the shadyRoot\r\n  // has an insertion point)\r\n  // 2. container is a shadyRoot (don't distribute, instead set\r\n  // container to container.host.\r\n  // 3. node is <content> (host of container needs distribution)\r\n  insertBefore(node, ref_node) {\r\n    if (ref_node && tree.Logical.getParentNode(ref_node) !== this) {\r\n      throw Error('The ref_node to be inserted before is not a child ' +\r\n        'of this node');\r\n    }\r\n    // remove node from its current position iff it's in a tree.\r\n    if (node.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {\r\n      let parent = tree.Logical.getParentNode(node);\r\n      mixinImpl.removeNodeFromParent(node, parent);\r\n    }\r\n    if (!mixinImpl.addNode(this, node, ref_node)) {\r\n      if (ref_node) {\r\n        // if ref_node is an insertion point replace with first distributed node\r\n        let root = mixinImpl.ownerShadyRootForNode(ref_node);\r\n        if (root) {\r\n          ref_node = ref_node.localName === root.getInsertionPointTag() ?\r\n            mixinImpl.firstComposedNode(ref_node) : ref_node;\r\n        }\r\n      }\r\n      // if adding to a shadyRoot, add to host instead\r\n      let container = utils.isShadyRoot(this) ?\r\n        this.host : this;\r\n      if (ref_node) {\r\n        tree.Composed.insertBefore(container, node, ref_node);\r\n      } else {\r\n        tree.Composed.appendChild(container, node);\r\n      }\r\n    }\r\n    mixinImpl._scheduleObserver(this, node);\r\n    return node;\r\n  },\r\n\r\n  /**\r\n    Removes the given `node` from the element's `lightChildren`.\r\n    This method also performs dom composition.\r\n  */\r\n  removeChild(node) {\r\n    if (tree.Logical.getParentNode(node) !== this) {\r\n      throw Error('The node to be removed is not a child of this node: ' +\r\n        node);\r\n    }\r\n    if (!mixinImpl.removeNode(node)) {\r\n      // if removing from a shadyRoot, remove form host instead\r\n      let container = utils.isShadyRoot(this) ?\r\n        this.host :\r\n        this;\r\n      // not guaranteed to physically be in container; e.g.\r\n      // undistributed nodes.\r\n      let parent = tree.Composed.getParentNode(node);\r\n      if (container === parent) {\r\n        tree.Composed.removeChild(container, node);\r\n      }\r\n    }\r\n    mixinImpl._scheduleObserver(this, null, node);\r\n    return node;\r\n  },\r\n\r\n  replaceChild(node, ref_node) {\r\n    this.insertBefore(node, ref_node);\r\n    this.removeChild(ref_node);\r\n    return node;\r\n  },\r\n\r\n  // TODO(sorvell): consider doing native QSA and filtering results.\r\n  querySelector(selector) {\r\n    // match selector and halt on first result.\r\n    let result = mixinImpl.query(this, function(n) {\r\n      return utils.matchesSelector(n, selector);\r\n    }, function(n) {\r\n      return Boolean(n);\r\n    })[0];\r\n    return result || null;\r\n  },\r\n\r\n  querySelectorAll(selector) {\r\n    return mixinImpl.query(this, function(n) {\r\n      return utils.matchesSelector(n, selector);\r\n    });\r\n  },\r\n\r\n  cloneNode(deep) {\r\n    if (this.localName == 'template') {\r\n      return nativeCloneNode.call(this, deep);\r\n    } else {\r\n      let n = nativeCloneNode.call(this, false);\r\n      if (deep) {\r\n        let c$ = this.childNodes;\r\n        for (let i=0, nc; i < c$.length; i++) {\r\n          nc = c$[i].cloneNode(true);\r\n          n.appendChild(nc);\r\n        }\r\n      }\r\n      return n;\r\n    }\r\n  },\r\n\r\n  importNode(externalNode, deep) {\r\n    // for convenience use this node's ownerDoc if the node isn't a document\r\n    let doc = this instanceof Document ? this :\r\n      this.ownerDocument;\r\n    let n = nativeImportNode.call(doc, externalNode, false);\r\n    if (deep) {\r\n      let c$ = tree.Logical.getChildNodes(externalNode);\r\n      utils.common.patchNode(n);\r\n      for (let i=0, nc; i < c$.length; i++) {\r\n        nc = doc.importNode(c$[i], true);\r\n        n.appendChild(nc);\r\n      }\r\n    }\r\n    return n;\r\n  }\r\n};\r\n\r\nObject.defineProperties(FragmentMixin, {\r\n\r\n  childNodes: {\r\n    get() {\r\n      let c$ = tree.Logical.getChildNodes(this);\r\n      return Array.isArray(c$) ? c$ : tree.arrayCopyChildNodes(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  children: {\r\n    get() {\r\n      if (tree.Logical.hasChildNodes(this)) {\r\n        return Array.prototype.filter.call(this.childNodes, function(n) {\r\n          return (n.nodeType === Node.ELEMENT_NODE);\r\n        });\r\n      } else {\r\n        return tree.arrayCopyChildren(this);\r\n      }\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  firstChild: {\r\n    get() {\r\n      return tree.Logical.getFirstChild(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  lastChild: {\r\n    get() {\r\n      return tree.Logical.getLastChild(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  firstElementChild: {\r\n    get() {\r\n      return tree.Logical.getFirstElementChild(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  lastElementChild: {\r\n    get() {\r\n      return tree.Logical.getLastElementChild(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  // TODO(srovell): strictly speaking fragments do not have textContent\r\n  // or innerHTML but ShadowRoots do and are not easily distinguishable.\r\n  // textContent / innerHTML\r\n  textContent: {\r\n    get() {\r\n      if (this.childNodes) {\r\n        let tc = [];\r\n        for (let i = 0, cn = this.childNodes, c; (c = cn[i]); i++) {\r\n          if (c.nodeType !== Node.COMMENT_NODE) {\r\n            tc.push(c.textContent);\r\n          }\r\n        }\r\n        return tc.join('');\r\n      }\r\n      return '';\r\n    },\r\n    set(text) {\r\n      mixinImpl.clearNode(this);\r\n      if (text) {\r\n        this.appendChild(document.createTextNode(text));\r\n      }\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  innerHTML: {\r\n    get() {\r\n      return getInnerHTML(this);\r\n    },\r\n    set(text) {\r\n      mixinImpl.clearNode(this);\r\n      let d = document.createElement('div');\r\n      d.innerHTML = text;\r\n      // here, appendChild may move nodes async so we cannot rely\r\n      // on node position when copying\r\n      let c$ = tree.arrayCopyChildNodes(d);\r\n      for (let i=0; i < c$.length; i++) {\r\n        this.appendChild(c$[i]);\r\n      }\r\n    },\r\n    configurable: true\r\n  }\r\n\r\n});\r\n\r\nlet ElementMixin = {\r\n\r\n  // TODO(sorvell): should only exist on <slot>\r\n  assignedNodes(options) {\r\n    return (options && options.flatten ? this._distributedNodes :\r\n      this._assignedNodes) || [];\r\n  },\r\n\r\n\r\n  setAttribute(name, value) {\r\n    nativeSetAttribute.call(this, name, value);\r\n    if (!mixinImpl.maybeDistributeParent(this)) {\r\n      mixinImpl.maybeDistributeAttributeChange(this, name);\r\n    }\r\n  },\r\n\r\n  removeAttribute(name) {\r\n    nativeRemoveAttribute.call(this, name);\r\n    if (!mixinImpl.maybeDistributeParent(this)) {\r\n      mixinImpl.maybeDistributeAttributeChange(this, name);\r\n    }\r\n  }\r\n\r\n};\r\n\r\nObject.defineProperties(ElementMixin, {\r\n\r\n  shadowRoot: {\r\n    get() {\r\n      return this.shadyRoot;\r\n    }\r\n  },\r\n\r\n  slot: {\r\n    get() {\r\n      return this.getAttribute('slot');\r\n    },\r\n    set(value) {\r\n      this.setAttribute('slot', value);\r\n    }\r\n  }\r\n\r\n});\r\n\r\nlet activeElementDescriptor = {\r\n  get() {\r\n    return mixinImpl.activeElementForNode(this);\r\n  }\r\n}\r\n\r\nlet ActiveElementMixin = {};\r\nObject.defineProperties(ActiveElementMixin, {\r\n  activeElement: activeElementDescriptor\r\n});\r\n\r\nlet UnderActiveElementMixin = {};\r\nObject.defineProperties(UnderActiveElementMixin, {\r\n  _activeElement: activeElementDescriptor\r\n});\r\n\r\nexport let Mixins = {\r\n\r\n  Node: utils.extendAll({__patched: 'Node'}, NodeMixin),\r\n\r\n  Fragment: utils.extendAll({__patched: 'Fragment'},\r\n    NodeMixin, FragmentMixin, ActiveElementMixin),\r\n\r\n  Element: utils.extendAll({__patched: 'Element'},\r\n    NodeMixin, FragmentMixin, ElementMixin, ActiveElementMixin),\r\n\r\n  // Note: activeElement cannot be patched on document!\r\n  Document: utils.extendAll({__patched: 'Document'},\r\n    NodeMixin, FragmentMixin, ElementMixin, UnderActiveElementMixin)\r\n\r\n};\r\n\r\nexport let getRootNode = function(node) {\r\n  return mixinImpl.getRootNode(node);\r\n}\r\n\r\nexport function filterMutations(mutations, target) {\r\n  const targetRootNode = getRootNode(target);\r\n  return mutations.filter(function(mutation) {\r\n    const mutationInScope = (targetRootNode === getRootNode(mutation.target));\r\n    if (mutationInScope && mutation.addedNodes) {\r\n      let nodes = Array.from(mutation.addedNodes).filter(function(n) {\r\n        return (targetRootNode === getRootNode(n));\r\n      });\r\n      Object.defineProperty(mutation, 'addedNodes', {\r\n        value: nodes,\r\n        configurable: true\r\n      });\r\n    }\r\n    return mutationInScope &&\r\n      (!mutation.addedNodes || mutation.addedNodes.length);\r\n  });\r\n}\r\n\r\n// const promise = Promise.resolve();\r\n\r\nclass AsyncObserver {\r\n\r\n  constructor() {\r\n    this._scheduled = false;\r\n    this.addedNodes = [];\r\n    this.removedNodes = [];\r\n    this.callbacks = new Set();\r\n  }\r\n\r\n  schedule() {\r\n    if (!this._scheduled) {\r\n      this._scheduled = true;\r\n      utils.promish.then(() => {\r\n        this.flush();\r\n      });\r\n    }\r\n  }\r\n\r\n  flush() {\r\n    if (this._scheduled) {\r\n      this._scheduled = false;\r\n      let mutations = this.takeRecords();\r\n      if (mutations.length) {\r\n        this.callbacks.forEach(function(cb) {\r\n          cb(mutations);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  takeRecords() {\r\n    if (this.addedNodes.length || this.removedNodes.length) {\r\n      let mutations = [{\r\n        addedNodes: this.addedNodes,\r\n        removedNodes: this.removedNodes\r\n      }];\r\n      this.addedNodes = [];\r\n      this.removedNodes = [];\r\n      return mutations;\r\n    }\r\n    return [];\r\n  }\r\n\r\n}\r\n\r\n// TODO(sorvell): consider instead polyfilling MutationObserver\r\n// directly so that users do not have to fork their code.\r\n// Supporting the entire api may be challenging: e.g. filtering out\r\n// removed nodes in the wrong scope and seeing non-distributing\r\n// subtree child mutations.\r\nexport let observeChildren = function(node, callback) {\r\n  utils.common.patchNode(node);\r\n  if (!node.__dom.observer) {\r\n    node.__dom.observer = new AsyncObserver();\r\n  }\r\n  node.__dom.observer.callbacks.add(callback);\r\n  let observer = node.__dom.observer;\r\n  return {\r\n    _callback: callback,\r\n    _observer: observer,\r\n    _node: node,\r\n    takeRecords() {\r\n      return observer.takeRecords()\r\n    }\r\n  };\r\n}\r\n\r\nexport let unobserveChildren = function(handle) {\r\n  let observer = handle && handle._observer;\r\n  if (observer) {\r\n    observer.callbacks.delete(handle._callback);\r\n    if (!observer.callbacks.size) {\r\n      handle._node.__dom.observer = null;\r\n    }\r\n  }\r\n}","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n/**\r\n * Patches elements that interacts with ShadyDOM\r\n * such that tree traversal and mutation apis act like they would under\r\n * ShadowDOM.\r\n *\r\n * This import enables seemless interaction with ShadyDOM powered\r\n * custom elements, enabling better interoperation with 3rd party code,\r\n * libraries, and frameworks that use DOM tree manipulation apis.\r\n */\r\n\r\n'use strict';\r\nimport {tree} from './tree'\r\nimport * as utils from './utils'\r\nimport {Mixins} from './element-mixin'\r\n\r\nexport let patchedCount = 0;\r\n\r\nlet log = false;\r\n\r\nlet patchImpl = {\r\n\r\n  canPatchNode: function(node) {\r\n    switch (node) {\r\n      case document.head:\r\n      case document.documentElement:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  },\r\n\r\n  hasPrototypeDescriptors: Boolean(Object.getOwnPropertyDescriptor(\r\n    window.Node.prototype, 'textContent')),\r\n\r\n  patch: function(node) {\r\n    patchedCount++;\r\n    log && window.console.warn('patch node', node);\r\n    if (this.hasPrototypeDescriptors) {\r\n      utils.patchPrototype(node, this.mixinForObject(node));\r\n    } else {\r\n      window.console.warn('Patching instance rather than prototype', node);\r\n      utils.extend(node, this.mixinForNode(node));\r\n    }\r\n  },\r\n\r\n  mixinForObject: function(obj) {\r\n    switch (obj.nodeType) {\r\n      case Node.ELEMENT_NODE:\r\n        return Mixins.Element;\r\n      case Node.DOCUMENT_FRAGMENT_NODE:\r\n        return Mixins.Fragment;\r\n      case Node.DOCUMENT_NODE:\r\n        return Mixins.Document;\r\n      case Node.TEXT_NODE:\r\n      case Node.COMMENT_NODE:\r\n        return Mixins.Node;\r\n    }\r\n  },\r\n\r\n  unpatch: function(obj) {\r\n    if (obj.__sourceProto) {\r\n      obj.__proto__ = obj.__sourceProto;\r\n\r\n    }\r\n    // TODO(sorvell): implement unpatching for non-proto patchable browsers\r\n  }\r\n\r\n};\r\n\r\nexport function patchNode(node) {\r\n  if (!utils.settings.inUse) {\r\n    return;\r\n  }\r\n  if (!isNodePatched(node) && patchImpl.canPatchNode(node)) {\r\n    tree.saveChildNodes(node);\r\n    patchImpl.patch(node);\r\n  }\r\n}\r\n\r\nexport function unpatchNode(node) {\r\n  patchImpl.unpatch(node);\r\n}\r\n\r\nexport function isNodePatched(node) {\r\n  return Boolean(node.__patched);\r\n}\r\n\r\n// TODO(sorvell): fake export\r\nutils.common.patchNode = patchNode;\r\nutils.common.isNodePatched = isNodePatched;","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nimport * as utils from './utils'\r\n\r\nlet origAddEventListener = Element.prototype.addEventListener;\r\nlet origRemoveEventListener = Element.prototype.removeEventListener;\r\n\r\n// https://github.com/w3c/webcomponents/issues/513#issuecomment-224183937\r\nlet alwaysComposed = {\r\n  blur: true,\r\n  focus: true,\r\n  focusin: true,\r\n  focusout: true,\r\n  click: true,\r\n  dblclick: true,\r\n  mousedown: true,\r\n  mouseenter: true,\r\n  mouseleave: true,\r\n  mousemove: true,\r\n  mouseout: true,\r\n  mouseover: true,\r\n  mouseup: true,\r\n  wheel: true,\r\n  beforeinput: true,\r\n  input: true,\r\n  keydown: true,\r\n  keyup: true,\r\n  compositionstart: true,\r\n  compositionupdate: true,\r\n  compositionend: true,\r\n  touchstart: true,\r\n  touchend: true,\r\n  touchmove: true,\r\n  touchcancel: true,\r\n  pointerover: true,\r\n  pointerenter: true,\r\n  pointerdown: true,\r\n  pointermove: true,\r\n  pointerup: true,\r\n  pointercancel: true,\r\n  pointerout: true,\r\n  pointerleave: true,\r\n  gotpointercapture: true,\r\n  lostpointercapture: true,\r\n  dragstart: true,\r\n  drag: true,\r\n  dragenter: true,\r\n  dragleave: true,\r\n  dragover: true,\r\n  drop: true,\r\n  dragend: true,\r\n  DOMActivate: true,\r\n  DOMFocusIn: true,\r\n  DOMFocusOut: true,\r\n  keypress: true\r\n};\r\n\r\nfunction pathComposer(startNode, composed) {\r\n  let composedPath = [];\r\n  let current = startNode;\r\n  let startRoot = startNode === window ? window : startNode.getRootNode();\r\n  while (current) {\r\n    composedPath.push(current);\r\n    if (current.assignedSlot) {\r\n      current = current.assignedSlot;\r\n    } else if (current.nodeType === Node.DOCUMENT_FRAGMENT_NODE && current.host && (composed || current !== startRoot)) {\r\n      current = current.host;\r\n    } else {\r\n      current = current.parentNode;\r\n    }\r\n  }\r\n  // event composedPath includes window when startNode's ownerRoot is document\r\n  if (composedPath[composedPath.length - 1] === document) {\r\n    composedPath.push(window);\r\n  }\r\n  return composedPath;\r\n}\r\n\r\nfunction retarget(refNode, path) {\r\n  if (!utils.isShadyRoot) {\r\n    return refNode;\r\n  }\r\n  // If ANCESTOR's root is not a shadow root or ANCESTOR's root is BASE's\r\n  // shadow-including inclusive ancestor, return ANCESTOR.\r\n  let refNodePath = pathComposer(refNode, true);\r\n  let p$ = path;\r\n  for (let i=0, ancestor, lastRoot, root, rootIdx; i < p$.length; i++) {\r\n    ancestor = p$[i];\r\n    root = ancestor === window ? window : ancestor.getRootNode();\r\n    if (root !== lastRoot) {\r\n      rootIdx = refNodePath.indexOf(root);\r\n      lastRoot = root;\r\n    }\r\n    if (!utils.isShadyRoot(root) || rootIdx > -1) {\r\n      return ancestor;\r\n    }\r\n  }\r\n}\r\n\r\nlet EventMixin = {\r\n\r\n  __patched: 'Event',\r\n\r\n  get composed() {\r\n    if (this.isTrusted && this.__composed === undefined) {\r\n      this.__composed = alwaysComposed[this.type];\r\n    }\r\n    return this.__composed || false;\r\n  },\r\n\r\n  composedPath() {\r\n    if (!this.__composedPath) {\r\n      this.__composedPath = pathComposer(this.__target, this.composed);\r\n    }\r\n    return this.__composedPath;\r\n  },\r\n\r\n  get target() {\r\n    return retarget(this.currentTarget, this.composedPath());\r\n  },\r\n\r\n  // http://w3c.github.io/webcomponents/spec/shadow/#event-relatedtarget-retargeting\r\n  get relatedTarget() {\r\n    if (!this.__relatedTarget) {\r\n      return null;\r\n    }\r\n    if (!this.__relatedTargetComposedPath) {\r\n      this.__relatedTargetComposedPath = pathComposer(this.__relatedTarget, true);\r\n    }\r\n    // find the deepest node in relatedTarget composed path that is in the same root with the currentTarget\r\n    return retarget(this.currentTarget, this.__relatedTargetComposedPath);\r\n  },\r\n  stopPropagation() {\r\n    Event.prototype.stopPropagation.call(this);\r\n    this.__propagationStopped = true;\r\n  },\r\n  stopImmediatePropagation() {\r\n    Event.prototype.stopImmediatePropagation.call(this);\r\n    this.__immediatePropagationStopped = true;\r\n    this.__propagationStopped = true;\r\n  }\r\n\r\n};\r\n\r\nfunction mixinComposedFlag(Base) {\r\n  // NOTE: avoiding use of `class` here so that transpiled output does not\r\n  // try to do `Base.call` with a dom construtor.\r\n  let klazz = function(type, options) {\r\n    let event = new Base(type, options);\r\n    event.__composed = options && Boolean(options.composed);\r\n    return event;\r\n  }\r\n  // put constructor properties on subclass\r\n  utils.mixin(klazz, Base);\r\n  klazz.prototype = Base.prototype;\r\n  return klazz;\r\n}\r\n\r\nlet nonBubblingEventsToRetarget = {\r\n  focus: true,\r\n  blur: true\r\n};\r\n\r\nfunction fireHandlers(event, node, phase) {\r\n  let hs = node.__handlers && node.__handlers[event.type] &&\r\n    node.__handlers[event.type][phase];\r\n  if (hs) {\r\n    for (let i = 0, fn; (fn = hs[i]); i++) {\r\n      fn.call(node, event);\r\n      if (event.__immediatePropagationStopped) {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction retargetNonBubblingEvent(e) {\r\n  let path = e.composedPath();\r\n  let node;\r\n  // override `currentTarget` to let patched `target` calculate correctly\r\n  Object.defineProperty(e, 'currentTarget', {\r\n    get: function() {\r\n      return node;\r\n    },\r\n    configurable: true\r\n  });\r\n  for (let i = path.length - 1; i >= 0; i--) {\r\n    node = path[i];\r\n    fireHandlers(e, node, 'capture');\r\n    if (e.__propagationStopped) {\r\n      return;\r\n    }\r\n  }\r\n  Object.defineProperty(e, 'eventPhase', {value: Event.BUBBLING_PHASE});\r\n  for (let i = 0; i < path.length; i++) {\r\n    node = path[i];\r\n    fireHandlers(e, node, 'bubble');\r\n    if (e.__propagationStopped) {\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction shouldCapture(optionsOrCapture) {\r\n  return Boolean(typeof optionsOrCapture === 'object' ?\r\n    optionsOrCapture.capture : optionsOrCapture);\r\n}\r\n\r\nexport function addEventListener(type, fn, optionsOrCapture) {\r\n  if (!fn) {\r\n    return;\r\n  }\r\n  // TODO: investigate if this is worth tracking, as it is only used for\r\n  // deciding if the `slotchanged` event should be fired\r\n  if (!this.__eventListenerCount) {\r\n    this.__eventListenerCount = 0;\r\n  }\r\n  this.__eventListenerCount++;\r\n  let wrappedFn = function(e) {\r\n    if (!e.__target) {\r\n      e.__target = e.target;\r\n      e.__relatedTarget = e.relatedTarget;\r\n      utils.patchPrototype(e, EventMixin);\r\n    }\r\n    // There are two critera that should stop events from firing on this node\r\n    // 1. the event is not composed and the current node is not in the same root as the target\r\n    // 2. when bubbling, if after retargeting, relatedTarget and target point to the same node\r\n    if (e.composed || e.composedPath().indexOf(this) > -1) {\r\n      if (e.eventPhase === Event.BUBBLING_PHASE) {\r\n        if (e.target === e.relatedTarget) {\r\n          e.stopImmediatePropagation();\r\n          return;\r\n        }\r\n      }\r\n      return fn(e);\r\n    }\r\n  };\r\n  // The function might be used for multiple events, so keep track of the event type.\r\n  fn.__eventWrappers = fn.__eventWrappers || {};\r\n  // This event listener might be added multiple times, we need to be able to remove\r\n  // all the wrappers we add.\r\n  fn.__eventWrappers[type] = fn.__eventWrappers[type] || [];\r\n  fn.__eventWrappers[type].push(wrappedFn);\r\n  if (nonBubblingEventsToRetarget[type]) {\r\n    this.__handlers = this.__handlers || {};\r\n    this.__handlers[type] = this.__handlers[type] || {capture: [], bubble: []};\r\n    if (shouldCapture(optionsOrCapture)) {\r\n      this.__handlers[type].capture.push(wrappedFn);\r\n    } else {\r\n      this.__handlers[type].bubble.push(wrappedFn);\r\n    }\r\n  } else {\r\n    origAddEventListener.call(this, type, wrappedFn, optionsOrCapture);\r\n  }\r\n}\r\n\r\nexport function removeEventListener(type, fn, optionsOrCapture) {\r\n  if (!fn) {\r\n    return;\r\n  }\r\n  const wrappers = fn.__eventWrappers || {};\r\n  const wrappersForType = wrappers[type] || [];\r\n  const wrapper = wrappersForType.pop();\r\n  origRemoveEventListener.call(this, type, wrapper || fn, optionsOrCapture);\r\n  if (wrapper) {\r\n    this.__eventListenerCount--;\r\n    if (nonBubblingEventsToRetarget[type]) {\r\n      if (this.__handlers) {\r\n        if (this.__handlers[type]) {\r\n          let idx;\r\n          if (shouldCapture(optionsOrCapture)) {\r\n            idx = this.__handlers[type].capture.indexOf(wrapper);\r\n            if (idx > -1) {\r\n              this.__handlers[type].capture.splice(idx, 1);\r\n            }\r\n          } else {\r\n            idx = this.__handlers[type].bubble.indexOf(wrapper);\r\n            if (idx > -1) {\r\n              this.__handlers[type].bubble.splice(idx, 1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function activateFocusEventOverrides() {\r\n  for (let ev in nonBubblingEventsToRetarget) {\r\n    window.addEventListener(ev, function(e) {\r\n      if (!e.__target) {\r\n        e.__target = e.target;\r\n        e.__relatedTarget = e.relatedTarget;\r\n        utils.patchPrototype(e, EventMixin);\r\n        retargetNonBubblingEvent(e);\r\n        e.stopImmediatePropagation();\r\n      }\r\n    }, true);\r\n  }\r\n}\r\n\r\nexport let OriginalEvent = Event;\r\nexport let PatchedEvent = mixinComposedFlag(Event);\r\nexport let PatchedCustomEvent = mixinComposedFlag(CustomEvent);\r\nexport let PatchedMouseEvent = mixinComposedFlag(MouseEvent);\r\n","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nimport {tree} from './tree'\r\n\r\n// NOTE: normalize event contruction where necessary (IE11)\r\nlet NormalizedEvent = typeof Event === 'function' ? Event :\r\n  function(inType, params) {\r\n    params = params || {};\r\n    var e = document.createEvent('Event');\r\n    e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable));\r\n    return e;\r\n  };\r\n\r\nexport default class {\r\n\r\n  constructor(root) {\r\n    this.root = root;\r\n    this.insertionPointTag = 'slot';\r\n  }\r\n\r\n  getInsertionPoints() {\r\n    return this.root.querySelectorAll(this.insertionPointTag);\r\n  }\r\n\r\n  hasInsertionPoint() {\r\n    return Boolean(this.root._insertionPoints &&\r\n      this.root._insertionPoints.length);\r\n  }\r\n\r\n  isInsertionPoint(node) {\r\n    return node.localName && node.localName == this.insertionPointTag;\r\n  }\r\n\r\n  distribute() {\r\n    if (this.hasInsertionPoint()) {\r\n      return this.distributePool(this.root, this.collectPool());\r\n    }\r\n    return [];\r\n  }\r\n\r\n  // Gather the pool of nodes that should be distributed. We will combine\r\n  // these with the \"content root\" to arrive at the composed tree.\r\n  collectPool() {\r\n    return tree.arrayCopy(\r\n      tree.Logical.getChildNodes(this.root.host));\r\n  }\r\n\r\n  // perform \"logical\" distribution; note, no actual dom is moved here,\r\n  // instead elements are distributed into storage\r\n  // array where applicable.\r\n  distributePool(node, pool) {\r\n    let dirtyRoots = [];\r\n    let p$ = this.root._insertionPoints;\r\n    for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\r\n      this.distributeInsertionPoint(p, pool);\r\n      // provoke redistribution on insertion point parents\r\n      // must do this on all candidate hosts since distribution in this\r\n      // scope invalidates their distribution.\r\n      // only get logical parent.\r\n      let parent = tree.Logical.getParentNode(p);\r\n      if (parent && parent.shadyRoot &&\r\n          this.hasInsertionPoint(parent.shadyRoot)) {\r\n        dirtyRoots.push(parent.shadyRoot);\r\n      }\r\n    }\r\n    for (let i=0; i < pool.length; i++) {\r\n      let p = pool[i];\r\n      if (p) {\r\n        p._assignedSlot = undefined;\r\n        // remove undistributed elements from physical dom.\r\n        let parent = tree.Composed.getParentNode(p);\r\n        if (parent) {\r\n          tree.Composed.removeChild(parent, p);\r\n        }\r\n      }\r\n    }\r\n    return dirtyRoots;\r\n  }\r\n\r\n  distributeInsertionPoint(insertionPoint, pool) {\r\n    let prevAssignedNodes = insertionPoint._assignedNodes;\r\n    if (prevAssignedNodes) {\r\n      this.clearAssignedSlots(insertionPoint, true);\r\n    }\r\n    insertionPoint._assignedNodes = [];\r\n    let needsSlotChange = false;\r\n    // distribute nodes from the pool that this selector matches\r\n    let anyDistributed = false;\r\n    for (let i=0, l=pool.length, node; i < l; i++) {\r\n      node=pool[i];\r\n      // skip nodes that were already used\r\n      if (!node) {\r\n        continue;\r\n      }\r\n      // distribute this node if it matches\r\n      if (this.matchesInsertionPoint(node, insertionPoint)) {\r\n        if (node.__prevAssignedSlot != insertionPoint) {\r\n          needsSlotChange = true;\r\n        }\r\n        this.distributeNodeInto(node, insertionPoint)\r\n        // remove this node from the pool\r\n        pool[i] = undefined;\r\n        // since at least one node matched, we won't need fallback content\r\n        anyDistributed = true;\r\n      }\r\n    }\r\n    // Fallback content if nothing was distributed here\r\n    if (!anyDistributed) {\r\n      let children = tree.Logical.getChildNodes(insertionPoint);\r\n      for (let j = 0, node; j < children.length; j++) {\r\n        node = children[j];\r\n        if (node.__prevAssignedSlot != insertionPoint) {\r\n          needsSlotChange = true;\r\n        }\r\n        this.distributeNodeInto(node, insertionPoint);\r\n      }\r\n    }\r\n    // we're already dirty if a node was newly added to the slot\r\n    // and we're also dirty if the assigned count decreased.\r\n    if (prevAssignedNodes) {\r\n      // TODO(sorvell): the tracking of previously assigned slots\r\n      // could instead by done with a Set and then we could\r\n      // avoid needing to iterate here to clear the info.\r\n      for (let i=0; i < prevAssignedNodes.length; i++) {\r\n        prevAssignedNodes[i].__prevAssignedSlot = null;\r\n      }\r\n      if (insertionPoint._assignedNodes.length < prevAssignedNodes.length) {\r\n        needsSlotChange = true;\r\n      }\r\n    }\r\n    this.setDistributedNodesOnInsertionPoint(insertionPoint);\r\n    if (needsSlotChange) {\r\n      this._fireSlotChange(insertionPoint);\r\n    }\r\n  }\r\n\r\n  clearAssignedSlots(slot, savePrevious) {\r\n    let n$ = slot._assignedNodes;\r\n    if (n$) {\r\n      for (let i=0; i < n$.length; i++) {\r\n        let n = n$[i];\r\n        if (savePrevious) {\r\n          n.__prevAssignedSlot = n._assignedSlot;\r\n        }\r\n        // only clear if it was previously set to this slot;\r\n        // this helps ensure that if the node has otherwise been distributed\r\n        // ignore it.\r\n        if (n._assignedSlot === slot) {\r\n          n._assignedSlot = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  matchesInsertionPoint(node, insertionPoint) {\r\n    let slotName = insertionPoint.getAttribute('name');\r\n    slotName = slotName ? slotName.trim() : '';\r\n    let slot = node.getAttribute && node.getAttribute('slot');\r\n    slot = slot ? slot.trim() : '';\r\n    return (slot == slotName);\r\n  }\r\n\r\n  distributeNodeInto(child, insertionPoint) {\r\n    insertionPoint._assignedNodes.push(child);\r\n    child._assignedSlot = insertionPoint;\r\n  }\r\n\r\n  setDistributedNodesOnInsertionPoint(insertionPoint) {\r\n    let n$ = insertionPoint._assignedNodes;\r\n    insertionPoint._distributedNodes = [];\r\n    for (let i=0, n; (i<n$.length) && (n=n$[i]) ; i++) {\r\n      if (this.isInsertionPoint(n)) {\r\n        let d$ = n._distributedNodes;\r\n        if (d$) {\r\n          for (let j=0; j < d$.length; j++) {\r\n            insertionPoint._distributedNodes.push(d$[j]);\r\n          }\r\n        }\r\n      } else {\r\n        insertionPoint._distributedNodes.push(n$[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  _fireSlotChange(insertionPoint) {\r\n    // NOTE: cannot bubble correctly here so not setting bubbles: true\r\n    // Safari tech preview does not bubble but chrome does\r\n    // Spec says it bubbles (https://dom.spec.whatwg.org/#mutation-observers)\r\n    insertionPoint.dispatchEvent(new NormalizedEvent('slotchange'));\r\n    if (insertionPoint._assignedSlot) {\r\n      this._fireSlotChange(insertionPoint._assignedSlot);\r\n    }\r\n  }\r\n\r\n  isFinalDestination(insertionPoint) {\r\n    return !(insertionPoint._assignedSlot);\r\n  }\r\n\r\n}","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n/**\r\n * Patches elements that interacts with ShadyDOM\r\n * such that tree traversal and mutation apis act like they would under\r\n * ShadowDOM.\r\n *\r\n * This import enables seemless interaction with ShadyDOM powered\r\n * custom elements, enabling better interoperation with 3rd party code,\r\n * libraries, and frameworks that use DOM tree manipulation apis.\r\n */\r\n\r\n'use strict';\r\nimport * as utils from './utils'\r\nimport {ShadyRoot, flush, enqueue} from './shady'\r\nimport * as patch from './patch'\r\nimport {getRootNode, filterMutations, observeChildren, unobserveChildren}\r\n  from './element-mixin'\r\nimport * as events from './event-mixin'\r\nimport {tree, getNativeProperty} from './tree'\r\n\r\nif (utils.settings.inUse) {\r\n\r\n  window.ShadyDOM = {\r\n    tree: tree,\r\n    getNativeProperty: getNativeProperty,\r\n    patch: patch.patchNode,\r\n    isPatched: patch.isNodePatched,\r\n    unpatch: patch.unpatchNode,\r\n    isShadyRoot: utils.isShadyRoot,\r\n    enqueue: enqueue,\r\n    flush: flush,\r\n    inUse: utils.settings.inUse,\r\n    filterMutations: filterMutations,\r\n    observeChildren: observeChildren,\r\n    unobserveChildren: unobserveChildren\r\n  };\r\n\r\n  let createRootAndEnsurePatched = function(node) {\r\n    // TODO(sorvell): need to ensure ancestors are patched but this introduces\r\n    // a timing problem with gathering composed children.\r\n    // (1) currently the child list is crawled and patched when patching occurs\r\n    // (this needs to change)\r\n    // (2) we can only patch when an element has received its parsed children\r\n    // because we cannot detect them when inserted by parser.\r\n    // let ancestor = node;\r\n    // while (ancestor) {\r\n    //   patchNode(ancestor);\r\n    //   ancestor = ancestor.parentNode || ancestor.host;\r\n    // }\r\n    patch.patchNode(node);\r\n    let root = new ShadyRoot(node);\r\n    patch.patchNode(root);\r\n    return root;\r\n  }\r\n\r\n  Element.prototype.attachShadow = function() {\r\n    return createRootAndEnsurePatched(this);\r\n  }\r\n\r\n  Node.prototype.addEventListener = events.addEventListener;\r\n  Node.prototype.removeEventListener = events.removeEventListener;\r\n  Event = events.PatchedEvent;\r\n  CustomEvent = events.PatchedCustomEvent;\r\n  MouseEvent = events.PatchedMouseEvent;\r\n  events.activateFocusEventOverrides();\r\n\r\n  Object.defineProperty(Node.prototype, 'isConnected', {\r\n    get() {\r\n      return document.documentElement.contains(this);\r\n    },\r\n    configurable: true\r\n  });\r\n\r\n  Node.prototype.getRootNode = function(options) {\r\n    return getRootNode(this, options);\r\n  }\r\n\r\n  Object.defineProperty(Element.prototype, 'slot', {\r\n    get() {\r\n      return this.getAttribute('slot');\r\n    },\r\n    set(value) {\r\n      this.setAttribute('slot', value);\r\n    },\r\n    configurable: true\r\n  });\r\n\r\n  Object.defineProperty(Node.prototype, 'assignedSlot', {\r\n    get() {\r\n      return this._assignedSlot || null;\r\n    },\r\n    configurable: true\r\n  });\r\n\r\n  // TODO(sorvell): super experimental auto patching of document fragment\r\n  // via appendChild. This either needs to be expanded or contracted.\r\n  // DocumentFragment.prototype.appendChild = function(node) {\r\n  //   patchNode(this);\r\n  //   return this.appendChild(node);\r\n  // }\r\n\r\n}\r\n"]}