{"version":3,"sources":["utils.js","array-splice.js","tree.js","shady.js","innerHTML.js","element-mixin.js","patch.js","event-mixin.js","distributor.js","env.js"],"names":["isShadyRoot","obj","Boolean","__localName","matchesSelector","element","selector","matches","call","copyOwnProperty","name","source","target","let","pd","Object","getOwnPropertyDescriptor","defineProperty","extend","n","n$","getOwnPropertyNames","i","length","extendAll","sources","mixin","patchPrototype","proto","getPrototypeOf","hasOwnProperty","patchProto","create","__sourceProto","__patchProto","setPrototypeOf","newSplice","index","removed","addedCount","getNativeProperty","property","descriptors","HTMLElement","prototype","Element","Node","get","enqueue","callback","scheduled","utils.promish","then","flush","flushList","push","flushCount","shift","customElements","const","isFlushedMaxed","flushMax","Error","escapeReplace","c","escapeAttr","s","replace","escapeAttrRegExp","escapeData","escapeDataRegExp","makeSet","arr","set","getOuterHTML","node","parentNode","composed","nodeType","ELEMENT_NODE","attr","tagName","localName","attrs","attributes","value","voidElements","getInnerHTML","TEXT_NODE","data","plaintextParents","COMMENT_NODE","window","console","error","content","child","c$","childNodes","l","filterMutations","mutations","targetRootNode","getRootNode","filter","mutation","mutationInScope","addedNodes","nodes","Array","from","configurable","patchNode","utils.settings","inUse","isNodePatched","patchImpl","canPatchNode","tree","saveChildNodes","patch","unpatchNode","unpatch","__patched","pathComposer","startNode","composedPath","current","startRoot","assignedSlot","DOCUMENT_FRAGMENT_NODE","host","document","retarget","refNode","path","utils.isShadyRoot","ancestor","lastRoot","root","rootIdx","refNodePath","p$","indexOf","mixinComposedFlag","Base","klazz","type","options","event","__composed","utils.mixin","fireHandlers","phase","hs","__handlers","fn","__immediatePropagationStopped","retargetNonBubblingEvent","e","__propagationStopped","Event","BUBBLING_PHASE","shouldCapture","optionsOrCapture","capture","getEventWrapperId","JSON","stringify","normalizedOptions","passive","once","addEventListener","this","__eventListenerCount","__eventWrappers","eventWrapperId","wrappersForType","WeakMap","has","wrappedFn","removeEventListener","__target","__relatedTarget","relatedTarget","utils.patchPrototype","EventMixin","eventPhase","stopImmediatePropagation","nonBubblingEventsToRetarget","bubble","origAddEventListener","wrappers","wrapperFn","delete","origRemoveEventListener","idx","splice","activateFocusEventOverrides","ev","settings","ShadyDOM","hasNativeShadowDOM","attachShadow","force","promish","p","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","common","Promise","resolve","cb","twiddle","createTextNode","observer","MutationObserver","disconnect","observe","characterData","EDIT_LEAVE","EDIT_UPDATE","EDIT_ADD","EDIT_DELETE","ArraySplice","calcEditDistances","currentStart","currentEnd","old","oldStart","oldEnd","rowCount","columnCount","distances","j","equals","north","west","spliceOperationsFromEditDistances","edits","min","northWest","reverse","calcSplices","prefixCount","suffixCount","minLength","Math","sharedPrefix","sharedSuffix","ops","undefined","splices","oldIndex","searchLength","index1","index2","count","calculateSplices","previous","currentValue","previousValue","nativeInsertBefore","insertBefore","nativeAppendChild","appendChild","nativeRemoveChild","removeChild","arrayCopyChildNodes","parent","copy","firstChild","nextSibling","arrayCopyChildren","firstElementChild","nextElementSibling","arrayCopy","a$","Logical","Composed","hasParentNode","saveComposedData","__dom","hasChildNodes","getChildNodes","_getChildNodes","getFirstChild","getNextSibling","getParentNode","getLastChild","lastChild","getPreviousSibling","previousSibling","getFirstElementChild","_getFirstElementChild","getLastElementChild","_getLastElementChild","getNextElementSibling","_getNextElementSibling","getPreviousElementSibling","_getPreviousElementSibling","utils.common","recordInsertBefore","container","ref_node","_linkNode","recordRemoveChild","$parentNode","$childNodes","$firstChild","$nextSibling","getComposedChildNodes","$lastChild","$previousSibling","lastElementChild","previousElementSibling","clearChildNodes","saveParentNode","newChild","refChild","_addChild","currentParent","_removeChild","isFrag","oldParent","NormalizedEvent","inType","params","createEvent","initEvent","bubbles","cancelable","Distributor","anonymous","insertionPointTag","getInsertionPoints","querySelectorAll","hasInsertionPoint","_insertionPoints","isInsertionPoint","distribute","distributePool","collectPool","pool","dirtyRoots","distributeInsertionPoint","shadyRoot","_assignedSlot","insertionPoint","prevAssignedNodes","_assignedNodes","clearAssignedSlots","needsSlotChange","anyDistributed","matchesInsertionPoint","__prevAssignedSlot","distributeNodeInto","children","setDistributedNodesOnInsertionPoint","_fireSlotChange","slot","savePrevious","slotName","getAttribute","trim","_distributedNodes","d$","dispatchEvent","isFinalDestination","ShadyRoot","frag","createDocumentFragment","__proto__","ShadyFragmentMixin","_init","ShadyMixin","_clean","_hasRendered","_distributor","update","distributionRoot","_findDistributionRoot","render","_elementNeedsDistribution","_skipUpdateInsertionPoints","updateInsertionPoints","compose","forceRender","i$","__insertionPoints","insertionPoints","_composeTree","_updateChildNodes","_composeNode","distributedNodes","distributedNode","d","next","getInsertionPointTag","DocumentFragment","utils.extend","list","mixinImpl","addNode","ownerRoot","ownerShadyRootForNode","__noInsertionPoint","ipAdded","_maybeAddInsertionPoint","_addedNode","handled","_maybeDistribute","removeNode","distributed","logicalParent","maybeDistributeParent","_removeDistributedChildren","_removeOwnerShadyRoot","_removedNode","_scheduleObserver","addedNode","removedNode","removedNodes","schedule","removeNodeFromParent","_hasCachedOwnerRoot","__ownerShadyRoot","documentElement","contains","fragContent","querySelector","wrappedContent","hasContent","needsDist","_nodeNeedsDistribution","added","np","na","hostNeedsDist","ip$","_contains","dc$","assignedNodes","flatten","firstComposedNode","clearNode","maybeDistributeAttributeChange","query","matcher","halter","_queryElements","elements","_queryElement","result","activeElementForNode","active","activeElement","activeRoot","nativeCloneNode","cloneNode","nativeImportNode","Document","importNode","nativeSetAttribute","setAttribute","nativeRemoveAttribute","removeAttribute","NodeMixin","defineProperties","parentElement","FragmentMixin","replaceChild","utils.matchesSelector","deep","nc","externalNode","doc","ownerDocument","isArray","textContent","tc","cn","join","text","innerHTML","createElement","ElementMixin","shadowRoot","activeElementDescriptor","ActiveElementMixin","UnderActiveElementMixin","_activeElement","Mixins","utils.extendAll","Fragment","AsyncObserver","_scheduled","callbacks","Set","this$1","takeRecords","forEach","observeChildren","add","_callback","_observer","_node","unobserveChildren","handle","size","patchedCount","log","head","hasPrototypeDescriptors","warn","mixinForObject","mixinForNode","DOCUMENT_NODE","alwaysComposed","blur","focus","focusin","focusout","click","dblclick","mousedown","mouseenter","mouseleave","mousemove","mouseout","mouseover","mouseup","wheel","beforeinput","input","keydown","keyup","compositionstart","compositionupdate","compositionend","touchstart","touchend","touchmove","touchcancel","pointerover","pointerenter","pointerdown","pointermove","pointerup","pointercancel","pointerout","pointerleave","gotpointercapture","lostpointercapture","dragstart","drag","dragenter","dragleave","dragover","drop","dragend","DOMActivate","DOMFocusIn","DOMFocusOut","keypress","isTrusted","__composedPath","currentTarget","__relatedTargetComposedPath","stopPropagation","PatchedEvent","PatchedCustomEvent","CustomEvent","PatchedMouseEvent","MouseEvent","patch.patchNode","isPatched","patch.isNodePatched","patch.unpatchNode","createRootAndEnsurePatched","events.addEventListener","events.removeEventListener","events.PatchedEvent","events.PatchedCustomEvent","events.PatchedMouseEvent","events.activateFocusEventOverrides"],"mappings":"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","file":"shadydom.min.js","sourcesContent":["/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nexport let settings = window.ShadyDOM || {};\r\n\r\nsettings.hasNativeShadowDOM = Boolean(Element.prototype.attachShadow && Node.prototype.getRootNode);\r\n\r\nsettings.inUse = settings.force || !settings.hasNativeShadowDOM;\r\n\r\nexport function isShadyRoot(obj) {\r\n  return Boolean(obj.__localName === 'ShadyRoot');\r\n}\r\n\r\nlet p = Element.prototype;\r\nlet matches = p.matches || p.matchesSelector ||\r\n  p.mozMatchesSelector || p.msMatchesSelector ||\r\n  p.oMatchesSelector || p.webkitMatchesSelector;\r\n\r\nexport function matchesSelector(element, selector) {\r\n  return matches.call(element, selector);\r\n}\r\n\r\nfunction copyOwnProperty(name, source, target) {\r\n  let pd = Object.getOwnPropertyDescriptor(source, name);\r\n  if (pd) {\r\n    Object.defineProperty(target, name, pd);\r\n  }\r\n}\r\n\r\nexport function extend(target, source) {\r\n  if (target && source) {\r\n    let n$ = Object.getOwnPropertyNames(source);\r\n    for (let i=0, n; (i<n$.length) && (n=n$[i]); i++) {\r\n      copyOwnProperty(n, source, target);\r\n    }\r\n  }\r\n  return target || source;\r\n}\r\n\r\nexport function extendAll(target, ...sources) {\r\n  for (let i=0; i < sources.length; i++) {\r\n    extend(target, sources[i]);\r\n  }\r\n  return target;\r\n}\r\n\r\nexport function mixin(target, source) {\r\n  for (var i in source) {\r\n    target[i] = source[i];\r\n  }\r\n  return target;\r\n}\r\n\r\nexport function patchPrototype(obj, mixin) {\r\n  let proto = Object.getPrototypeOf(obj);\r\n  if (!proto.hasOwnProperty('__patchProto')) {\r\n    let patchProto = Object.create(proto);\r\n    patchProto.__sourceProto = proto;\r\n    extend(patchProto, mixin);\r\n    proto.__patchProto = patchProto;\r\n  }\r\n  Object.setPrototypeOf(obj, proto.__patchProto);\r\n}\r\n\r\nexport function unpatchPrototype(obj) {\r\n  if (obj.__sourceProto) {\r\n    Object.setPrototypeOf(obj, obj.__sourceProto);\r\n  }\r\n}\r\n\r\nexport let common = {};\r\n\r\n// TODO(sorvell): actually rely on a real Promise polyfill...\r\nexport let promish;\r\nif (window.Promise) {\r\n  promish = Promise.resolve();\r\n} else {\r\n  promish = {\r\n    then: function(cb) {\r\n      let twiddle = document.createTextNode('');\r\n      let observer = new MutationObserver(function() {\r\n        observer.disconnect();\r\n        cb();\r\n      });\r\n      observer.observe(twiddle, {characterData: true});\r\n    }\r\n  }\r\n}","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nfunction newSplice(index, removed, addedCount) {\r\n  return {\r\n    index: index,\r\n    removed: removed,\r\n    addedCount: addedCount\r\n  };\r\n}\r\n\r\nconst EDIT_LEAVE = 0;\r\nconst EDIT_UPDATE = 1;\r\nconst EDIT_ADD = 2;\r\nconst EDIT_DELETE = 3;\r\n\r\nlet ArraySplice = {\r\n\r\n  // Note: This function is *based* on the computation of the Levenshtein\r\n  // \"edit\" distance. The one change is that \"updates\" are treated as two\r\n  // edits - not one. With Array splices, an update is really a delete\r\n  // followed by an add. By retaining this, we optimize for \"keeping\" the\r\n  // maximum array items in the original array. For example:\r\n  //\r\n  //   'xxxx123' -> '123yyyy'\r\n  //\r\n  // With 1-edit updates, the shortest path would be just to update all seven\r\n  // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\r\n  // leaves the substring '123' intact.\r\n  calcEditDistances(current, currentStart, currentEnd,\r\n                              old, oldStart, oldEnd) {\r\n    // \"Deletion\" columns\r\n    let rowCount = oldEnd - oldStart + 1;\r\n    let columnCount = currentEnd - currentStart + 1;\r\n    let distances = new Array(rowCount);\r\n\r\n    // \"Addition\" rows. Initialize null column.\r\n    for (let i = 0; i < rowCount; i++) {\r\n      distances[i] = new Array(columnCount);\r\n      distances[i][0] = i;\r\n    }\r\n\r\n    // Initialize null row\r\n    for (let j = 0; j < columnCount; j++)\r\n      distances[0][j] = j;\r\n\r\n    for (let i = 1; i < rowCount; i++) {\r\n      for (let j = 1; j < columnCount; j++) {\r\n        if (this.equals(current[currentStart + j - 1], old[oldStart + i - 1]))\r\n          distances[i][j] = distances[i - 1][j - 1];\r\n        else {\r\n          let north = distances[i - 1][j] + 1;\r\n          let west = distances[i][j - 1] + 1;\r\n          distances[i][j] = north < west ? north : west;\r\n        }\r\n      }\r\n    }\r\n\r\n    return distances;\r\n  },\r\n\r\n  // This starts at the final weight, and walks \"backward\" by finding\r\n  // the minimum previous weight recursively until the origin of the weight\r\n  // matrix.\r\n  spliceOperationsFromEditDistances(distances) {\r\n    let i = distances.length - 1;\r\n    let j = distances[0].length - 1;\r\n    let current = distances[i][j];\r\n    let edits = [];\r\n    while (i > 0 || j > 0) {\r\n      if (i == 0) {\r\n        edits.push(EDIT_ADD);\r\n        j--;\r\n        continue;\r\n      }\r\n      if (j == 0) {\r\n        edits.push(EDIT_DELETE);\r\n        i--;\r\n        continue;\r\n      }\r\n      let northWest = distances[i - 1][j - 1];\r\n      let west = distances[i - 1][j];\r\n      let north = distances[i][j - 1];\r\n\r\n      let min;\r\n      if (west < north)\r\n        min = west < northWest ? west : northWest;\r\n      else\r\n        min = north < northWest ? north : northWest;\r\n\r\n      if (min == northWest) {\r\n        if (northWest == current) {\r\n          edits.push(EDIT_LEAVE);\r\n        } else {\r\n          edits.push(EDIT_UPDATE);\r\n          current = northWest;\r\n        }\r\n        i--;\r\n        j--;\r\n      } else if (min == west) {\r\n        edits.push(EDIT_DELETE);\r\n        i--;\r\n        current = west;\r\n      } else {\r\n        edits.push(EDIT_ADD);\r\n        j--;\r\n        current = north;\r\n      }\r\n    }\r\n\r\n    edits.reverse();\r\n    return edits;\r\n  },\r\n\r\n  /**\r\n   * Splice Projection functions:\r\n   *\r\n   * A splice map is a representation of how a previous array of items\r\n   * was transformed into a new array of items. Conceptually it is a list of\r\n   * tuples of\r\n   *\r\n   *   <index, removed, addedCount>\r\n   *\r\n   * which are kept in ascending index order of. The tuple represents that at\r\n   * the |index|, |removed| sequence of items were removed, and counting forward\r\n   * from |index|, |addedCount| items were added.\r\n   */\r\n\r\n  /**\r\n   * Lacking individual splice mutation information, the minimal set of\r\n   * splices can be synthesized given the previous state and final state of an\r\n   * array. The basic approach is to calculate the edit distance matrix and\r\n   * choose the shortest path through it.\r\n   *\r\n   * Complexity: O(l * p)\r\n   *   l: The length of the current array\r\n   *   p: The length of the old array\r\n   */\r\n  calcSplices(current, currentStart, currentEnd,\r\n                        old, oldStart, oldEnd) {\r\n    let prefixCount = 0;\r\n    let suffixCount = 0;\r\n    let splice;\r\n\r\n    let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\r\n    if (currentStart == 0 && oldStart == 0)\r\n      prefixCount = this.sharedPrefix(current, old, minLength);\r\n\r\n    if (currentEnd == current.length && oldEnd == old.length)\r\n      suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);\r\n\r\n    currentStart += prefixCount;\r\n    oldStart += prefixCount;\r\n    currentEnd -= suffixCount;\r\n    oldEnd -= suffixCount;\r\n\r\n    if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\r\n      return [];\r\n\r\n    if (currentStart == currentEnd) {\r\n      splice = newSplice(currentStart, [], 0);\r\n      while (oldStart < oldEnd)\r\n        splice.removed.push(old[oldStart++]);\r\n\r\n      return [ splice ];\r\n    } else if (oldStart == oldEnd)\r\n      return [ newSplice(currentStart, [], currentEnd - currentStart) ];\r\n\r\n    let ops = this.spliceOperationsFromEditDistances(\r\n        this.calcEditDistances(current, currentStart, currentEnd,\r\n                               old, oldStart, oldEnd));\r\n\r\n    splice = undefined;\r\n    let splices = [];\r\n    let index = currentStart;\r\n    let oldIndex = oldStart;\r\n    for (let i = 0; i < ops.length; i++) {\r\n      switch(ops[i]) {\r\n        case EDIT_LEAVE:\r\n          if (splice) {\r\n            splices.push(splice);\r\n            splice = undefined;\r\n          }\r\n\r\n          index++;\r\n          oldIndex++;\r\n          break;\r\n        case EDIT_UPDATE:\r\n          if (!splice)\r\n            splice = newSplice(index, [], 0);\r\n\r\n          splice.addedCount++;\r\n          index++;\r\n\r\n          splice.removed.push(old[oldIndex]);\r\n          oldIndex++;\r\n          break;\r\n        case EDIT_ADD:\r\n          if (!splice)\r\n            splice = newSplice(index, [], 0);\r\n\r\n          splice.addedCount++;\r\n          index++;\r\n          break;\r\n        case EDIT_DELETE:\r\n          if (!splice)\r\n            splice = newSplice(index, [], 0);\r\n\r\n          splice.removed.push(old[oldIndex]);\r\n          oldIndex++;\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (splice) {\r\n      splices.push(splice);\r\n    }\r\n    return splices;\r\n  },\r\n\r\n  sharedPrefix(current, old, searchLength) {\r\n    for (let i = 0; i < searchLength; i++)\r\n      if (!this.equals(current[i], old[i]))\r\n        return i;\r\n    return searchLength;\r\n  },\r\n\r\n  sharedSuffix(current, old, searchLength) {\r\n    let index1 = current.length;\r\n    let index2 = old.length;\r\n    let count = 0;\r\n    while (count < searchLength && this.equals(current[--index1], old[--index2]))\r\n      count++;\r\n\r\n    return count;\r\n  },\r\n\r\n  calculateSplices(current, previous) {\r\n    return this.calcSplices(current, 0, current.length, previous, 0,\r\n                            previous.length);\r\n  },\r\n\r\n  equals(currentValue, previousValue) {\r\n    return currentValue === previousValue;\r\n  }\r\n\r\n};\r\n\r\nexport let calculateSplices = (current, previous) =>\r\n  ArraySplice.calculateSplices(current, previous);\r\n","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\n// TODO(sorvell): circular (patch loads tree and tree loads patch)\r\n// for now this is stuck on `utils`\r\n//import {patchNode} from './patch'\r\nimport * as utils from './utils'\r\n\r\n// native add/remove\r\nlet nativeInsertBefore = Element.prototype.insertBefore;\r\nlet nativeAppendChild = Element.prototype.appendChild;\r\nlet nativeRemoveChild = Element.prototype.removeChild;\r\n\r\n/**\r\n * `tree` is a dom manipulation library used by ShadyDom to\r\n * manipulate composed and logical trees.\r\n */\r\nexport let tree = {\r\n\r\n  // sad but faster than slice...\r\n  arrayCopyChildNodes(parent) {\r\n    let copy=[], i=0;\r\n    for (let n=parent.firstChild; n; n=n.nextSibling) {\r\n      copy[i++] = n;\r\n    }\r\n    return copy;\r\n  },\r\n\r\n  arrayCopyChildren(parent) {\r\n    let copy=[], i=0;\r\n    for (let n=parent.firstElementChild; n; n=n.nextElementSibling) {\r\n      copy[i++] = n;\r\n    }\r\n    return copy;\r\n  },\r\n\r\n  arrayCopy(a$) {\r\n    let l = a$.length;\r\n    let copy = new Array(l);\r\n    for (let i=0; i < l; i++) {\r\n      copy[i] = a$[i];\r\n    }\r\n    return copy;\r\n  },\r\n\r\n  saveChildNodes(node) {\r\n    tree.Logical.saveChildNodes(node);\r\n    if (!tree.Composed.hasParentNode(node)) {\r\n      tree.Composed.saveComposedData(node);\r\n      //tree.Composed.saveParentNode(node);\r\n    }\r\n    tree.Composed.saveChildNodes(node);\r\n  }\r\n\r\n};\r\n\r\ntree.Logical = {\r\n\r\n  hasParentNode(node) {\r\n    return Boolean(node.__dom && node.__dom.parentNode);\r\n  },\r\n\r\n  hasChildNodes(node) {\r\n    return Boolean(node.__dom && node.__dom.childNodes !== undefined);\r\n  },\r\n\r\n  getChildNodes(node) {\r\n    // note: we're distinguishing here between undefined and false-y:\r\n    // hasChildNodes uses undefined check to see if this element has logical\r\n    // children; the false-y check indicates whether or not we should rebuild\r\n    // the cached childNodes array.\r\n    return this.hasChildNodes(node) ? this._getChildNodes(node) :\r\n      tree.Composed.getChildNodes(node);\r\n  },\r\n\r\n  _getChildNodes(node) {\r\n    if (!node.__dom.childNodes) {\r\n      node.__dom.childNodes = [];\r\n      for (let n=this.getFirstChild(node); n; n=this.getNextSibling(n)) {\r\n        node.__dom.childNodes.push(n);\r\n      }\r\n    }\r\n    return node.__dom.childNodes;\r\n  },\r\n\r\n  // NOTE: __dom can be created under 2 conditions: (1) an element has a\r\n  // logical tree, or (2) an element is in a logical tree. In case (1), the\r\n  // element will store firstChild/lastChild, and in case (2), the element\r\n  // will store parentNode, nextSibling, previousSibling. This means that\r\n  // the mere existence of __dom is not enough to know if the requested\r\n  // logical data is available and instead we do an explicit undefined check.\r\n  getParentNode(node) {\r\n    return node.__dom && node.__dom.parentNode !== undefined ?\r\n      node.__dom.parentNode : tree.Composed.getParentNode(node);\r\n  },\r\n\r\n  getFirstChild(node) {\r\n    return node.__dom && node.__dom.firstChild !== undefined ?\r\n      node.__dom.firstChild : tree.Composed.getFirstChild(node);\r\n  },\r\n\r\n  getLastChild(node) {\r\n    return node.__dom && node.__dom.lastChild  !== undefined ?\r\n      node.__dom.lastChild : tree.Composed.getLastChild(node);\r\n  },\r\n\r\n  getNextSibling(node) {\r\n    return node.__dom && node.__dom.nextSibling  !== undefined ?\r\n      node.__dom.nextSibling : tree.Composed.getNextSibling(node);\r\n  },\r\n\r\n  getPreviousSibling(node) {\r\n    return node.__dom && node.__dom.previousSibling  !== undefined ?\r\n      node.__dom.previousSibling : tree.Composed.getPreviousSibling(node);\r\n  },\r\n\r\n  getFirstElementChild(node) {\r\n    return node.__dom && node.__dom.firstChild !== undefined ?\r\n      this._getFirstElementChild(node) :\r\n      tree.Composed.getFirstElementChild(node);\r\n  },\r\n\r\n  _getFirstElementChild(node) {\r\n    let n = node.__dom.firstChild;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = n.__dom.nextSibling;\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getLastElementChild(node) {\r\n    return node.__dom && node.__dom.lastChild !== undefined ?\r\n      this._getLastElementChild(node) :\r\n      tree.Composed.getLastElementChild(node);\r\n  },\r\n\r\n  _getLastElementChild(node) {\r\n    let n = node.__dom.lastChild;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = n.__dom.previousSibling;\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getNextElementSibling(node) {\r\n    return node.__dom && node.__dom.nextSibling !== undefined ?\r\n      this._getNextElementSibling(node) :\r\n      tree.Composed.getNextElementSibling(node);\r\n  },\r\n\r\n  _getNextElementSibling(node) {\r\n    let n = node.__dom.nextSibling;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = this.getNextSibling(n);\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getPreviousElementSibling(node) {\r\n    return node.__dom && node.__dom.previousSibling !== undefined ?\r\n      this._getPreviousElementSibling(node) :\r\n      tree.Composed.getPreviousElementSibling(node);\r\n  },\r\n\r\n  _getPreviousElementSibling(node) {\r\n    let n = node.__dom.previousSibling;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = this.getPreviousSibling(n);\r\n    }\r\n    return n;\r\n  },\r\n\r\n  // Capture the list of light children. It's important to do this before we\r\n  // start transforming the DOM into \"rendered\" state.\r\n  // Children may be added to this list dynamically. It will be treated as the\r\n  // source of truth for the light children of the element. This element's\r\n  // actual children will be treated as the rendered state once this function\r\n  // has been called.\r\n  saveChildNodes(node) {\r\n    if (!this.hasChildNodes(node)) {\r\n      node.__dom = node.__dom || {};\r\n      node.__dom.firstChild = node.firstChild;\r\n      node.__dom.lastChild = node.lastChild;\r\n      let c$ = node.__dom.childNodes = tree.arrayCopyChildNodes(node);\r\n      for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {\r\n        n.__dom = n.__dom || {};\r\n        n.__dom.parentNode = node;\r\n        n.__dom.nextSibling = c$[i+1] || null;\r\n        n.__dom.previousSibling = c$[i-1] || null;\r\n        utils.common.patchNode(n);\r\n      }\r\n    }\r\n  },\r\n\r\n  // TODO(sorvell): may need to patch saveChildNodes iff the tree has\r\n  // already been distributed.\r\n  // NOTE: ensure `node` is patched...\r\n  recordInsertBefore(node, container, ref_node) {\r\n    container.__dom.childNodes = null;\r\n    // handle document fragments\r\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n      let c$ = tree.arrayCopyChildNodes(node);\r\n      for (let i=0; i < c$.length; i++) {\r\n        this._linkNode(c$[i], container, ref_node);\r\n      }\r\n      // cleanup logical dom in doc fragment.\r\n      node.__dom = node.__dom || {};\r\n      node.__dom.firstChild = node.__dom.lastChild = null;\r\n      node.__dom.childNodes = null;\r\n    } else {\r\n      this._linkNode(node, container, ref_node);\r\n    }\r\n  },\r\n\r\n  _linkNode(node, container, ref_node) {\r\n    utils.common.patchNode(node);\r\n    ref_node = ref_node || null;\r\n    node.__dom = node.__dom || {};\r\n    container.__dom = container.__dom || {};\r\n    if (ref_node) {\r\n      ref_node.__dom = ref_node.__dom || {};\r\n    }\r\n    // update ref_node.previousSibling <-> node\r\n    node.__dom.previousSibling = ref_node ? ref_node.__dom.previousSibling :\r\n      container.__dom.lastChild;\r\n    if (node.__dom.previousSibling) {\r\n      node.__dom.previousSibling.__dom.nextSibling = node;\r\n    }\r\n    // update node <-> ref_node\r\n    node.__dom.nextSibling = ref_node;\r\n    if (node.__dom.nextSibling) {\r\n      node.__dom.nextSibling.__dom.previousSibling = node;\r\n    }\r\n    // update node <-> container\r\n    node.__dom.parentNode = container;\r\n    if (ref_node) {\r\n      if (ref_node === container.__dom.firstChild) {\r\n        container.__dom.firstChild = node;\r\n      }\r\n    } else {\r\n      container.__dom.lastChild = node;\r\n      if (!container.__dom.firstChild) {\r\n        container.__dom.firstChild = node;\r\n      }\r\n    }\r\n    // remove caching of childNodes\r\n    container.__dom.childNodes = null;\r\n  },\r\n\r\n  recordRemoveChild(node, container) {\r\n    node.__dom = node.__dom || {};\r\n    container.__dom = container.__dom || {};\r\n    if (node === container.__dom.firstChild) {\r\n      container.__dom.firstChild = node.__dom.nextSibling;\r\n    }\r\n    if (node === container.__dom.lastChild) {\r\n      container.__dom.lastChild = node.__dom.previousSibling;\r\n    }\r\n    let p = node.__dom.previousSibling;\r\n    let n = node.__dom.nextSibling;\r\n    if (p) {\r\n      p.__dom = p.__dom || {};\r\n      p.__dom.nextSibling = n;\r\n    }\r\n    if (n) {\r\n      n.__dom = n.__dom || {};\r\n      n.__dom.previousSibling = p;\r\n    }\r\n    // When an element is removed, logical data is no longer tracked.\r\n    // Explicitly set `undefined` here to indicate this. This is disginguished\r\n    // from `null` which is set if info is null.\r\n    node.__dom.parentNode = node.__dom.previousSibling =\r\n      node.__dom.nextSibling = null;\r\n    // remove caching of childNodes\r\n    container.__dom.childNodes = null;\r\n  }\r\n\r\n}\r\n\r\n\r\n// TODO(sorvell): composed tree manipulation is made available\r\n// (1) to maninpulate the composed tree, and (2) to track changes\r\n// to the tree for optional patching pluggability.\r\ntree.Composed = {\r\n\r\n  hasParentNode(node) {\r\n    return Boolean(node.__dom && node.__dom.$parentNode !== undefined);\r\n  },\r\n\r\n  hasChildNodes(node) {\r\n    return Boolean(node.__dom && node.__dom.$childNodes !== undefined);\r\n  },\r\n\r\n  getChildNodes(node) {\r\n    return this.hasChildNodes(node) ? this._getChildNodes(node) :\r\n      (!node.__patched && tree.arrayCopy(node.childNodes));\r\n  },\r\n\r\n  _getChildNodes(node) {\r\n    if (!node.__dom.$childNodes) {\r\n      node.__dom.$childNodes = [];\r\n      for (let n=node.__dom.$firstChild; n; n=n.__dom.$nextSibling) {\r\n        node.__dom.$childNodes.push(n);\r\n      }\r\n    }\r\n    return node.__dom.$childNodes;\r\n  },\r\n\r\n  getComposedChildNodes(node) {\r\n    return node.__dom.$childNodes;\r\n  },\r\n\r\n  getParentNode(node) {\r\n    return this.hasParentNode(node) ? node.__dom.$parentNode :\r\n      (!node.__patched && node.parentNode);\r\n  },\r\n\r\n  getFirstChild(node) {\r\n    return node.__patched ? node.__dom.$firstChild : node.firstChild;\r\n  },\r\n\r\n  getLastChild(node) {\r\n    return node.__patched ? node.__dom.$lastChild : node.lastChild;\r\n  },\r\n\r\n  getNextSibling(node) {\r\n    return node.__patched ? node.__dom.$nextSibling : node.nextSibling;\r\n  },\r\n\r\n  getPreviousSibling(node) {\r\n    return node.__patched ? node.__dom.$previousSibling : node.previousSibling;\r\n  },\r\n\r\n  getFirstElementChild(node) {\r\n    return node.__patched ? this._getFirstElementChild(node) :\r\n      node.firstElementChild;\r\n  },\r\n\r\n  _getFirstElementChild(node) {\r\n    let n = node.__dom.$firstChild;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = n.__dom.$nextSibling;\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getLastElementChild(node) {\r\n    return node.__patched ? this._getLastElementChild(node) :\r\n      node.lastElementChild;\r\n  },\r\n\r\n  _getLastElementChild(node) {\r\n    let n = node.__dom.$lastChild;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = n.__dom.$previousSibling;\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getNextElementSibling(node) {\r\n    return node.__patched ? this._getNextElementSibling(node) :\r\n      node.nextElementSibling;\r\n  },\r\n\r\n  _getNextElementSibling(node) {\r\n    let n = node.__dom.$nextSibling;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = this.getNextSibling(n);\r\n    }\r\n    return n;\r\n  },\r\n\r\n  getPreviousElementSibling(node) {\r\n    return node.__patched ? this._getPreviousElementSibling(node) :\r\n      node.previousElementSibling;\r\n  },\r\n\r\n  _getPreviousElementSibling(node) {\r\n    let n = node.__dom.$previousSibling;\r\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\r\n      n = this.getPreviousSibling(n);\r\n    }\r\n    return n;\r\n  },\r\n\r\n  saveChildNodes(node) {\r\n    if (!this.hasChildNodes(node)) {\r\n      node.__dom = node.__dom || {};\r\n      node.__dom.$firstChild = node.firstChild;\r\n      node.__dom.$lastChild = node.lastChild;\r\n      let c$ = node.__dom.$childNodes = tree.arrayCopyChildNodes(node);\r\n      for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {\r\n        this.saveComposedData(n);\r\n      }\r\n    }\r\n  },\r\n\r\n  saveComposedData(node) {\r\n    node.__dom = node.__dom || {};\r\n    if (node.__dom.$parentNode === undefined) {\r\n      node.__dom.$parentNode = node.parentNode;\r\n    }\r\n    if (node.__dom.$nextSibling === undefined) {\r\n      node.__dom.$nextSibling = node.nextSibling;\r\n    }\r\n    if (node.__dom.$previousSibling === undefined) {\r\n      node.__dom.$previousSibling = node.previousSibling;\r\n    }\r\n  },\r\n\r\n  recordInsertBefore(node, container, ref_node) {\r\n    container.__dom.$childNodes = null;\r\n    // handle document fragments\r\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n      // TODO(sorvell): remember this for patching:\r\n      // the act of setting this info can affect patched nodes\r\n      // getters; therefore capture childNodes before patching.\r\n      for (let n=this.getFirstChild(node); n; n=this.getNextSibling(n)) {\r\n        this._linkNode(n, container, ref_node);\r\n      }\r\n    } else {\r\n      this._linkNode(node, container, ref_node);\r\n    }\r\n  },\r\n\r\n  _linkNode(node, container, ref_node) {\r\n    node.__dom = node.__dom || {};\r\n    container.__dom = container.__dom || {};\r\n    if (ref_node) {\r\n      ref_node.__dom = ref_node.__dom || {};\r\n    }\r\n    // update ref_node.previousSibling <-> node\r\n    node.__dom.$previousSibling = ref_node ? ref_node.__dom.$previousSibling :\r\n      container.__dom.$lastChild;\r\n    if (node.__dom.$previousSibling) {\r\n      node.__dom.$previousSibling.__dom.$nextSibling = node;\r\n    }\r\n    // update node <-> ref_node\r\n    node.__dom.$nextSibling = ref_node;\r\n    if (node.__dom.$nextSibling) {\r\n      node.__dom.$nextSibling.__dom.$previousSibling = node;\r\n    }\r\n    // update node <-> container\r\n    node.__dom.$parentNode = container;\r\n    if (ref_node) {\r\n      if (ref_node === container.__dom.$firstChild) {\r\n        container.__dom.$firstChild = node;\r\n      }\r\n    } else {\r\n      container.__dom.$lastChild = node;\r\n      if (!container.__dom.$firstChild) {\r\n        container.__dom.$firstChild = node;\r\n      }\r\n    }\r\n    // remove caching of childNodes\r\n    container.__dom.$childNodes = null;\r\n  },\r\n\r\n  recordRemoveChild(node, container) {\r\n    node.__dom = node.__dom || {};\r\n    container.__dom = container.__dom || {};\r\n    if (node === container.__dom.$firstChild) {\r\n      container.__dom.$firstChild = node.__dom.$nextSibling;\r\n    }\r\n    if (node === container.__dom.$lastChild) {\r\n      container.__dom.$lastChild = node.__dom.$previousSibling;\r\n    }\r\n    let p = node.__dom.$previousSibling;\r\n    let n = node.__dom.$nextSibling;\r\n    if (p) {\r\n      p.__dom = p.__dom || {};\r\n      p.__dom.$nextSibling = n;\r\n    }\r\n    if (n) {\r\n      n.__dom = n.__dom || {};\r\n      n.__dom.$previousSibling = p;\r\n    }\r\n    node.__dom.$parentNode = node.__dom.$previousSibling =\r\n      node.__dom.$nextSibling = null;\r\n    // remove caching of childNodes\r\n    container.__dom.$childNodes = null;\r\n  },\r\n\r\n  clearChildNodes(node) {\r\n    let c$ = this.getChildNodes(node);\r\n    for (let i=0, c; i < c$.length; i++) {\r\n      c = c$[i];\r\n      this.recordRemoveChild(c, node);\r\n      nativeRemoveChild.call(node, c)\r\n    }\r\n  },\r\n\r\n  saveParentNode(node) {\r\n    node.__dom = node.__dom || {};\r\n    node.__dom.$parentNode = node.parentNode;\r\n  },\r\n\r\n  insertBefore(parentNode, newChild, refChild) {\r\n    this.saveChildNodes(parentNode);\r\n    // remove from current location.\r\n    this._addChild(parentNode, newChild, refChild);\r\n    return nativeInsertBefore.call(parentNode, newChild, refChild || null);\r\n  },\r\n\r\n  appendChild(parentNode, newChild) {\r\n    this.saveChildNodes(parentNode);\r\n    this._addChild(parentNode, newChild);\r\n    return nativeAppendChild.call(parentNode, newChild);\r\n  },\r\n\r\n  removeChild(parentNode, node) {\r\n    let currentParent = this.getParentNode(node);\r\n    this.saveChildNodes(parentNode);\r\n    this._removeChild(parentNode, node);\r\n    if (currentParent === parentNode) {\r\n      return nativeRemoveChild.call(parentNode, node);\r\n    }\r\n  },\r\n\r\n  _addChild(parentNode, newChild, refChild) {\r\n    let isFrag = (newChild.nodeType === Node.DOCUMENT_FRAGMENT_NODE);\r\n    let oldParent = this.getParentNode(newChild);\r\n    if (oldParent) {\r\n      this._removeChild(oldParent, newChild);\r\n    }\r\n    if (isFrag) {\r\n      let c$ = this.getChildNodes(newChild);\r\n      for (let i=0; i < c$.length; i++) {\r\n        let c = c$[i];\r\n        // unlink document fragment children\r\n        this._removeChild(newChild, c);\r\n        this.recordInsertBefore(c, parentNode, refChild);\r\n      }\r\n    } else {\r\n      this.recordInsertBefore(newChild, parentNode, refChild);\r\n    }\r\n  },\r\n\r\n  _removeChild(parentNode, node) {\r\n    this.recordRemoveChild(node, parentNode);\r\n  }\r\n\r\n};\r\n\r\n// for testing...\r\nlet descriptors = {};\r\nexport function getNativeProperty(element, property) {\r\n  if (!descriptors[property]) {\r\n    descriptors[property] = Object.getOwnPropertyDescriptor(\r\n      HTMLElement.prototype, property) ||\r\n    Object.getOwnPropertyDescriptor(\r\n      Element.prototype, property) ||\r\n    Object.getOwnPropertyDescriptor(\r\n      Node.prototype, property);\r\n  }\r\n  return descriptors[property].get.call(element);\r\n}\r\n\r\n// for testing...\r\nfunction assertNative(element, property, tracked) {\r\n  let native = getNativeProperty(element, property);\r\n  if (native != tracked && element.__patched) {\r\n    window.console.warn('tracked', tracked, 'native', native);\r\n  }\r\n  return tracked;\r\n}","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nimport {calculateSplices} from './array-splice'\r\nimport * as utils from './utils'\r\nimport {tree} from './tree'\r\nimport Distributor from './distributor'\r\n\r\n/**\r\n  Implements a pared down version of ShadowDOM's scoping, which is easy to\r\n  polyfill across browsers.\r\n*/\r\nexport class ShadyRoot {\r\n\r\n  constructor(host) {\r\n    if (!host) {\r\n      throw 'Must provide a host';\r\n    }\r\n    // NOTE: this strange construction is necessary because\r\n    // DocumentFragment cannot be subclassed on older browsers.\r\n    let frag = document.createDocumentFragment();\r\n    frag.__proto__ = ShadyFragmentMixin;\r\n    frag._init(host);\r\n    return frag;\r\n  }\r\n\r\n}\r\n\r\nlet ShadyMixin = {\r\n\r\n  _init(host) {\r\n    // NOTE: set a fake local name so this element can be\r\n    // distinguished from a DocumentFragment when patching.\r\n    // FF doesn't allow this to be `localName`\r\n    this.__localName = 'ShadyRoot';\r\n    // root <=> host\r\n    host.shadyRoot = this;\r\n    this.host = host;\r\n    // logical dom setup\r\n    tree.Logical.saveChildNodes(host);\r\n    tree.Logical.saveChildNodes(this);\r\n    // state flags\r\n    this._clean = true;\r\n    this._hasRendered = false;\r\n    this._distributor = new Distributor(this);\r\n    this.update();\r\n  },\r\n\r\n  // async render the \"top\" distributor (this is all that is needed to\r\n  // distribute this host).\r\n  update() {\r\n    // TODO(sorvell): instead the root should always be enqueued to helps record that it is dirty.\r\n    // Then, in `render`, the top most (in the distribution tree) \"dirty\" root should be rendered.\r\n    let distributionRoot = this._findDistributionRoot(this.host);\r\n    //console.log('update from', this.host, 'root', distributionRoot.host, distributionRoot._clean);\r\n    if (distributionRoot._clean) {\r\n      distributionRoot._clean = false;\r\n      enqueue(function() {\r\n        distributionRoot.render();\r\n      });\r\n    }\r\n  },\r\n\r\n  // TODO(sorvell): this may not return a shadowRoot (for example if the element is in a docFragment)\r\n  // this should only return a shadowRoot.\r\n  // returns the host that's the top of this host's distribution tree\r\n  _findDistributionRoot(element) {\r\n    let root = element.shadyRoot;\r\n    while (element && this._elementNeedsDistribution(element)) {\r\n      root = element.getRootNode();\r\n      element = root && root.host;\r\n    }\r\n    return root;\r\n  },\r\n\r\n  // Return true if a host's children includes\r\n  // an insertion point that selects selectively\r\n  _elementNeedsDistribution(element) {\r\n    let c$ = tree.Logical.getChildNodes(element);\r\n    for (let i=0, c; i < c$.length; i++) {\r\n      c = c$[i];\r\n      if (this._distributor.isInsertionPoint(c)) {\r\n        return element.getRootNode();\r\n      }\r\n    }\r\n  },\r\n\r\n  render() {\r\n    if (!this._clean) {\r\n      this._clean = true;\r\n      if (!this._skipUpdateInsertionPoints) {\r\n        this.updateInsertionPoints();\r\n      } else if (!this._hasRendered) {\r\n        this._insertionPoints = [];\r\n      }\r\n      this._skipUpdateInsertionPoints = false;\r\n      // TODO(sorvell): previous ShadyDom had a fast path here\r\n      // that would avoid distribution for initial render if\r\n      // no insertion points exist. We cannot currently do this because\r\n      // it relies on elements being in the physical shadowRoot element\r\n      // so that native methods will be used. The current append code\r\n      // simply provokes distribution in this case and does not put the\r\n      // nodes in the shadowRoot. This could be done but we'll need to\r\n      // consider if the special processing is worth the perf gain.\r\n      // if (!this._hasRendered && !this._insertionPoints.length) {\r\n      //   tree.Composed.clearChildNodes(this.host);\r\n      //   tree.Composed.appendChild(this.host, this);\r\n      // } else {\r\n      // logical\r\n      this.distribute();\r\n      // physical\r\n      this.compose();\r\n      this._hasRendered = true;\r\n    }\r\n  },\r\n\r\n  forceRender() {\r\n    this._clean = false;\r\n    this.render();\r\n  },\r\n\r\n  distribute() {\r\n    let dirtyRoots = this._distributor.distribute();\r\n    for (let i=0; i<dirtyRoots.length; i++) {\r\n      dirtyRoots[i].forceRender();\r\n    }\r\n  },\r\n\r\n  updateInsertionPoints() {\r\n    let i$ = this.__insertionPoints;\r\n    // if any insertion points have been removed, clear their distribution info\r\n    if (i$) {\r\n      for (let i=0, c; i < i$.length; i++) {\r\n        c = i$[i];\r\n        if (c.getRootNode() !== this) {\r\n          this._distributor.clearAssignedSlots(c);\r\n        }\r\n      }\r\n    }\r\n    i$ = this._insertionPoints = this._distributor.getInsertionPoints();\r\n    // ensure insertionPoints's and their parents have logical dom info.\r\n    // save logical tree info\r\n    // a. for shadyRoot\r\n    // b. for insertion points (fallback)\r\n    // c. for parents of insertion points\r\n    for (let i=0, c; i < i$.length; i++) {\r\n      c = i$[i];\r\n      tree.Logical.saveChildNodes(c);\r\n      tree.Logical.saveChildNodes(tree.Logical.getParentNode(c));\r\n    }\r\n  },\r\n\r\n  get _insertionPoints() {\r\n    if (!this.__insertionPoints) {\r\n      this.updateInsertionPoints();\r\n    }\r\n    return this.__insertionPoints || (this.__insertionPoints = []);\r\n  },\r\n\r\n  set _insertionPoints(insertionPoints) {\r\n    this.__insertionPoints = insertionPoints;\r\n  },\r\n\r\n  hasInsertionPoint() {\r\n    return this._distributor.hasInsertionPoint();\r\n  },\r\n\r\n  compose() {\r\n    // compose self\r\n    // note: it's important to mark this clean before distribution\r\n    // so that attachment that provokes additional distribution (e.g.\r\n    // adding something to your parentNode) works\r\n    this._composeTree();\r\n    // TODO(sorvell): See fast paths here in Polymer v1\r\n    // (these seem unnecessary)\r\n  },\r\n\r\n  // Reify dom such that it is at its correct rendering position\r\n  // based on logical distribution.\r\n  _composeTree() {\r\n    this._updateChildNodes(this.host, this._composeNode(this.host));\r\n    let p$ = this._insertionPoints || [];\r\n    for (let i=0, l=p$.length, p, parent; (i<l) && (p=p$[i]); i++) {\r\n      parent = tree.Logical.getParentNode(p);\r\n      if ((parent !== this.host) && (parent !== this)) {\r\n        this._updateChildNodes(parent, this._composeNode(parent));\r\n      }\r\n    }\r\n  },\r\n\r\n  // Returns the list of nodes which should be rendered inside `node`.\r\n  _composeNode(node) {\r\n    let children = [];\r\n    let c$ = tree.Logical.getChildNodes(node.shadyRoot || node);\r\n    for (let i = 0; i < c$.length; i++) {\r\n      let child = c$[i];\r\n      if (this._distributor.isInsertionPoint(child)) {\r\n        let distributedNodes = child._distributedNodes ||\r\n          (child._distributedNodes = []);\r\n        for (let j = 0; j < distributedNodes.length; j++) {\r\n          let distributedNode = distributedNodes[j];\r\n          if (this.isFinalDestination(child, distributedNode)) {\r\n            children.push(distributedNode);\r\n          }\r\n        }\r\n      } else {\r\n        children.push(child);\r\n      }\r\n    }\r\n    return children;\r\n  },\r\n\r\n  isFinalDestination(insertionPoint, node) {\r\n    return this._distributor.isFinalDestination(\r\n      insertionPoint, node);\r\n  },\r\n\r\n  // Ensures that the rendered node list inside `container` is `children`.\r\n  _updateChildNodes(container, children) {\r\n    let composed = tree.Composed.getChildNodes(container);\r\n    let splices = calculateSplices(children, composed);\r\n    // process removals\r\n    for (let i=0, d=0, s; (i<splices.length) && (s=splices[i]); i++) {\r\n      for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\r\n        // check if the node is still where we expect it is before trying\r\n        // to remove it; this can happen if we move a node and\r\n        // then schedule its previous host for distribution resulting in\r\n        // the node being removed here.\r\n        if (tree.Composed.getParentNode(n) === container) {\r\n          tree.Composed.removeChild(container, n);\r\n        }\r\n        composed.splice(s.index + d, 1);\r\n      }\r\n      d -= s.addedCount;\r\n    }\r\n    // process adds\r\n    for (let i=0, s, next; (i<splices.length) && (s=splices[i]); i++) { //eslint-disable-line no-redeclare\r\n      next = composed[s.index];\r\n      for (let j=s.index, n; j < s.index + s.addedCount; j++) {\r\n        n = children[j];\r\n        tree.Composed.insertBefore(container, n, next);\r\n        // TODO(sorvell): is this splice strictly needed?\r\n        composed.splice(j, 0, n);\r\n      }\r\n    }\r\n  },\r\n\r\n  getInsertionPointTag() {\r\n    return this._distributor.insertionPointTag;\r\n  }\r\n\r\n}\r\n\r\nlet ShadyFragmentMixin = Object.create(DocumentFragment.prototype);\r\nutils.extend(ShadyFragmentMixin, ShadyMixin);\r\n\r\n// let needsUpgrade = window.CustomElements && !CustomElements.useNative;\r\n\r\n// function upgradeLogicalChildren(children) {\r\n//   if (needsUpgrade && children) {\r\n//     for (let i=0; i < children.length; i++) {\r\n//       CustomElements.upgrade(children[i]);\r\n//     }\r\n//   }\r\n// }\r\n\r\n// render enqueuer/flusher\r\nlet customElements = window.customElements;\r\nlet flushList = [];\r\nlet scheduled;\r\nlet flushCount = 0;\r\nlet flushMax = 100;\r\nexport function enqueue(callback) {\r\n  if (!scheduled) {\r\n    scheduled = true;\r\n    utils.promish.then(flush);\r\n  }\r\n  flushList.push(callback);\r\n}\r\n\r\nexport function flush() {\r\n  scheduled = false;\r\n  flushCount++;\r\n  while (flushList.length) {\r\n    flushList.shift()();\r\n  }\r\n  if (customElements && customElements.flush) {\r\n    customElements.flush();\r\n  }\r\n  // continue flushing after elements are upgraded...\r\n  const isFlushedMaxed = (flushCount > flushMax);\r\n  if (flushList.length && !isFlushedMaxed) {\r\n      flush();\r\n  }\r\n  flushCount = 0;\r\n  if (isFlushedMaxed) {\r\n    throw new Error('Loop detected in ShadyDOM distribution, aborting.')\r\n  }\r\n}\r\n\r\nflush.list = flushList;","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\n// Cribbed from ShadowDOM polyfill\r\n// https://github.com/webcomponents/webcomponentsjs/blob/master/src/ShadowDOM/wrappers/HTMLElement.js#L28\r\n/////////////////////////////////////////////////////////////////////////////\r\n// innerHTML and outerHTML\r\n\r\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#escapingString\r\nlet escapeAttrRegExp = /[&\\u00A0\"]/g;\r\nlet escapeDataRegExp = /[&\\u00A0<>]/g;\r\n\r\nfunction escapeReplace(c) {\r\n  switch (c) {\r\n    case '&':\r\n      return '&amp;';\r\n    case '<':\r\n      return '&lt;';\r\n    case '>':\r\n      return '&gt;';\r\n    case '\"':\r\n      return '&quot;';\r\n    case '\\u00A0':\r\n      return '&nbsp;';\r\n  }\r\n}\r\n\r\nfunction escapeAttr(s) {\r\n  return s.replace(escapeAttrRegExp, escapeReplace);\r\n}\r\n\r\nfunction escapeData(s) {\r\n  return s.replace(escapeDataRegExp, escapeReplace);\r\n}\r\n\r\nfunction makeSet(arr) {\r\n  let set = {};\r\n  for (let i = 0; i < arr.length; i++) {\r\n    set[arr[i]] = true;\r\n  }\r\n  return set;\r\n}\r\n\r\n// http://www.whatwg.org/specs/web-apps/current-work/#void-elements\r\nlet voidElements = makeSet([\r\n  'area',\r\n  'base',\r\n  'br',\r\n  'col',\r\n  'command',\r\n  'embed',\r\n  'hr',\r\n  'img',\r\n  'input',\r\n  'keygen',\r\n  'link',\r\n  'meta',\r\n  'param',\r\n  'source',\r\n  'track',\r\n  'wbr'\r\n]);\r\n\r\nlet plaintextParents = makeSet([\r\n  'style',\r\n  'script',\r\n  'xmp',\r\n  'iframe',\r\n  'noembed',\r\n  'noframes',\r\n  'plaintext',\r\n  'noscript'\r\n]);\r\n\r\nexport function getOuterHTML(node, parentNode, composed) {\r\n  switch (node.nodeType) {\r\n    case Node.ELEMENT_NODE: {\r\n      let tagName = node.localName;\r\n      let s = '<' + tagName;\r\n      let attrs = node.attributes;\r\n      for (let i = 0, attr; (attr = attrs[i]); i++) {\r\n        s += ' ' + attr.name + '=\"' + escapeAttr(attr.value) + '\"';\r\n      }\r\n      s += '>';\r\n      if (voidElements[tagName]) {\r\n        return s;\r\n      }\r\n      return s + getInnerHTML(node, composed) + '</' + tagName + '>';\r\n    }\r\n    case Node.TEXT_NODE: {\r\n      let data = node.data;\r\n      if (parentNode && plaintextParents[parentNode.localName]) {\r\n        return data;\r\n      }\r\n      return escapeData(data);\r\n    }\r\n    case Node.COMMENT_NODE: {\r\n      return '<!--' + node.data + '-->';\r\n    }\r\n    default: {\r\n      window.console.error(node);\r\n      throw new Error('not implemented');\r\n    }\r\n  }\r\n}\r\n\r\nexport function getInnerHTML(node, composed) {\r\n  if (node.localName === 'template') {\r\n    node = node.content;\r\n  }\r\n  let s = '';\r\n  let c$ = composed ? composed(node) : node.childNodes;\r\n  for (let i=0, l=c$.length, child; (i<l) && (child=c$[i]); i++) {\r\n    s += getOuterHTML(child, node, composed);\r\n  }\r\n  return s;\r\n}","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nimport * as utils from './utils'\r\nimport {getInnerHTML} from './innerHTML'\r\nimport {tree} from './tree'\r\n\r\nlet mixinImpl = {\r\n\r\n  // Try to add node. Record logical info, track insertion points, perform\r\n  // distribution iff needed. Return true if the add is handled.\r\n  addNode(container, node, ref_node) {\r\n    let ownerRoot = this.ownerShadyRootForNode(container);\r\n    if (ownerRoot) {\r\n      // optimization: special insertion point tracking\r\n      if (node.__noInsertionPoint) {\r\n        ownerRoot._skipUpdateInsertionPoints = true;\r\n      }\r\n      // note: we always need to see if an insertion point is added\r\n      // since this saves logical tree info; however, invalidation state\r\n      // needs\r\n      let ipAdded = this._maybeAddInsertionPoint(node, container, ownerRoot);\r\n      // invalidate insertion points IFF not already invalid!\r\n      if (ipAdded) {\r\n        ownerRoot._skipUpdateInsertionPoints = false;\r\n      }\r\n      this._addedNode(node, ownerRoot);\r\n    }\r\n    if (tree.Logical.hasChildNodes(container)) {\r\n      tree.Logical.recordInsertBefore(node, container, ref_node);\r\n    }\r\n    // if not distributing and not adding to host, do a fast path addition\r\n    let handled = this._maybeDistribute(node, container, ownerRoot) ||\r\n      container.shadyRoot;\r\n    return handled;\r\n  },\r\n\r\n  // Try to remove node: update logical info and perform distribution iff\r\n  // needed. Return true if the removal has been handled.\r\n  // note that it's possible for both the node's host and its parent\r\n  // to require distribution... both cases are handled here.\r\n  removeNode(node) {\r\n    // important that we want to do this only if the node has a logical parent\r\n    let logicalParent = tree.Logical.hasParentNode(node) &&\r\n      tree.Logical.getParentNode(node);\r\n    let distributed;\r\n    let ownerRoot = this.ownerShadyRootForNode(node);\r\n    if (logicalParent) {\r\n      // distribute node's parent iff needed\r\n      distributed = this.maybeDistributeParent(node);\r\n      tree.Logical.recordRemoveChild(node, logicalParent);\r\n      // remove node from root and distribute it iff needed\r\n      if (ownerRoot && (this._removeDistributedChildren(ownerRoot, node) ||\r\n        logicalParent.localName === ownerRoot.getInsertionPointTag())) {\r\n        ownerRoot._skipUpdateInsertionPoints = false;\r\n        ownerRoot.update();\r\n      }\r\n    }\r\n    this._removeOwnerShadyRoot(node);\r\n    if (ownerRoot) {\r\n      this._removedNode(node, ownerRoot);\r\n    }\r\n    return distributed;\r\n  },\r\n\r\n\r\n  _scheduleObserver(node, addedNode, removedNode) {\r\n    let observer = node.__dom && node.__dom.observer;\r\n    if (observer) {\r\n      if (addedNode) {\r\n        observer.addedNodes.push(addedNode);\r\n      }\r\n      if (removedNode) {\r\n        observer.removedNodes.push(removedNode);\r\n      }\r\n      observer.schedule();\r\n    }\r\n  },\r\n\r\n  removeNodeFromParent(node, parent) {\r\n    if (parent) {\r\n      this._scheduleObserver(parent, null, node);\r\n      this.removeNode(node);\r\n    } else {\r\n      this._removeOwnerShadyRoot(node);\r\n    }\r\n  },\r\n\r\n  _hasCachedOwnerRoot(node) {\r\n    return Boolean(node.__ownerShadyRoot !== undefined);\r\n  },\r\n\r\n  getRootNode(node) {\r\n    if (!node || !node.nodeType) {\r\n      return;\r\n    }\r\n    let root = node.__ownerShadyRoot;\r\n    if (root === undefined) {\r\n      if (utils.isShadyRoot(node)) {\r\n        root = node;\r\n      } else {\r\n        let parent = tree.Logical.getParentNode(node);\r\n        root = parent ? this.getRootNode(parent) : node;\r\n      }\r\n      // memo-ize result for performance but only memo-ize\r\n      // result if node is in the document. This avoids a problem where a root\r\n      // can be cached while an element is inside a fragment.\r\n      // If this happens and we cache the result, the value can become stale\r\n      // because for perf we avoid processing the subtree of added fragments.\r\n      if (document.documentElement.contains(node)) {\r\n        node.__ownerShadyRoot = root;\r\n      }\r\n    }\r\n    return root;\r\n  },\r\n\r\n  ownerShadyRootForNode(node) {\r\n    let root = this.getRootNode(node);\r\n    if (utils.isShadyRoot(root)) {\r\n      return root;\r\n    }\r\n  },\r\n\r\n  _maybeDistribute(node, container, ownerRoot) {\r\n    // TODO(sorvell): technically we should check non-fragment nodes for\r\n    // <content> children but since this case is assumed to be exceedingly\r\n    // rare, we avoid the cost and will address with some specific api\r\n    // when the need arises.  For now, the user must call\r\n    // distributeContent(true), which updates insertion points manually\r\n    // and forces distribution.\r\n    let insertionPointTag = ownerRoot && ownerRoot.getInsertionPointTag() || '';\r\n    let fragContent = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) &&\r\n      !node.__noInsertionPoint &&\r\n      insertionPointTag && node.querySelector(insertionPointTag);\r\n    let wrappedContent = fragContent &&\r\n      (tree.Logical.getParentNode(fragContent).nodeType !==\r\n      Node.DOCUMENT_FRAGMENT_NODE);\r\n    let hasContent = fragContent || (node.localName === insertionPointTag);\r\n    // There are 3 possible cases where a distribution may need to occur:\r\n    // 1. <content> being inserted (the host of the shady root where\r\n    //    content is inserted needs distribution)\r\n    // 2. children being inserted into parent with a shady root (parent\r\n    //    needs distribution)\r\n    // 3. container is an insertionPoint\r\n    if (hasContent || (container.localName === insertionPointTag)) {\r\n      if (ownerRoot) {\r\n        // note, insertion point list update is handled after node\r\n        // mutations are complete\r\n        ownerRoot.update();\r\n      }\r\n    }\r\n    let needsDist = this._nodeNeedsDistribution(container);\r\n    if (needsDist) {\r\n      container.shadyRoot.update();\r\n    }\r\n    // Return true when distribution will fully handle the composition\r\n    // Note that if a content was being inserted that was wrapped by a node,\r\n    // and the parent does not need distribution, return false to allow\r\n    // the nodes to be added directly, after which children may be\r\n    // distributed and composed into the wrapping node(s)\r\n    return needsDist || (hasContent && !wrappedContent);\r\n  },\r\n\r\n  /* note: parent argument is required since node may have an out\r\n  of date parent at this point; returns true if a <content> is being added */\r\n  _maybeAddInsertionPoint(node, parent, root) {\r\n    let added;\r\n    let insertionPointTag = root.getInsertionPointTag();\r\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE &&\r\n      !node.__noInsertionPoint) {\r\n      let c$ = node.querySelectorAll(insertionPointTag);\r\n      for (let i=0, n, np, na; (i<c$.length) && (n=c$[i]); i++) {\r\n        np = tree.Logical.getParentNode(n);\r\n        // don't allow node's parent to be fragment itself\r\n        if (np === node) {\r\n          np = parent;\r\n        }\r\n        na = this._maybeAddInsertionPoint(n, np, root);\r\n        added = added || na;\r\n      }\r\n    } else if (node.localName === insertionPointTag) {\r\n      tree.Logical.saveChildNodes(parent);\r\n      tree.Logical.saveChildNodes(node);\r\n      added = true;\r\n    }\r\n    return added;\r\n  },\r\n\r\n  _nodeNeedsDistribution(node) {\r\n    return node && node.shadyRoot &&\r\n      node.shadyRoot.hasInsertionPoint();\r\n  },\r\n\r\n  // TODO(sorvell): needed for style scoping, use MO?\r\n  _addedNode() {},\r\n  _removedNode() {},\r\n  /*\r\n  _addedNode(node, root) {\r\n    // if (ShadyDOM.addedNode) {\r\n    //   ShadyDOM.addedNode(node, root);\r\n    // }\r\n  },\r\n\r\n  _removedNode(node, root) {\r\n    if (ShadyDOM.removedNode) {\r\n      ShadyDOM.removedNode(node, root);\r\n    }\r\n  },\r\n  */\r\n\r\n  _removeDistributedChildren(root, container) {\r\n    let hostNeedsDist;\r\n    let ip$ = root._insertionPoints;\r\n    for (let i=0; i<ip$.length; i++) {\r\n      let insertionPoint = ip$[i];\r\n      if (this._contains(container, insertionPoint)) {\r\n        let dc$ = insertionPoint.assignedNodes({flatten: true});\r\n        for (let j=0; j<dc$.length; j++) {\r\n          hostNeedsDist = true;\r\n          let node = dc$[j];\r\n          let parent = tree.Composed.getParentNode(node);\r\n          if (parent) {\r\n            tree.Composed.removeChild(parent, node);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return hostNeedsDist;\r\n  },\r\n\r\n  _contains(container, node) {\r\n    while (node) {\r\n      if (node == container) {\r\n        return true;\r\n      }\r\n      node = tree.Logical.getParentNode(node);\r\n    }\r\n  },\r\n\r\n  _removeOwnerShadyRoot(node) {\r\n    // optimization: only reset the tree if node is actually in a root\r\n    if (this._hasCachedOwnerRoot(node)) {\r\n      let c$ = tree.Logical.getChildNodes(node);\r\n      for (let i=0, l=c$.length, n; (i<l) && (n=c$[i]); i++) {\r\n        this._removeOwnerShadyRoot(n);\r\n      }\r\n    }\r\n    node.__ownerShadyRoot = undefined;\r\n  },\r\n\r\n  // TODO(sorvell): This will fail if distribution that affects this\r\n  // question is pending; this is expected to be exceedingly rare, but if\r\n  // the issue comes up, we can force a flush in this case.\r\n  firstComposedNode(insertionPoint) {\r\n    let n$ = insertionPoint.assignedNodes({flatten: true});\r\n    let root = this.getRootNode(insertionPoint);\r\n    for (let i=0, l=n$.length, n; (i<l) && (n=n$[i]); i++) {\r\n      // means that we're composed to this spot.\r\n      if (root.isFinalDestination(insertionPoint, n)) {\r\n        return n;\r\n      }\r\n    }\r\n  },\r\n\r\n  clearNode(node) {\r\n    while (node.firstChild) {\r\n      node.removeChild(node.firstChild);\r\n    }\r\n  },\r\n\r\n  maybeDistributeParent(node) {\r\n    let parent = tree.Logical.getParentNode(node);\r\n    if (this._nodeNeedsDistribution(parent)) {\r\n      parent.shadyRoot.update();\r\n      return true;\r\n    }\r\n  },\r\n\r\n  maybeDistributeAttributeChange(node, name) {\r\n    let distribute = (node.localName === 'slot' && name === 'name');\r\n    if (distribute) {\r\n      let root = this.getRootNode(node);\r\n      if (root.update) {\r\n        root.update();\r\n      }\r\n    }\r\n  },\r\n\r\n  // NOTE: `query` is used primarily for ShadyDOM's querySelector impl,\r\n  // but it's also generally useful to recurse through the element tree\r\n  // and is used by Polymer's styling system.\r\n  query(node, matcher, halter) {\r\n    let list = [];\r\n    this._queryElements(tree.Logical.getChildNodes(node), matcher,\r\n      halter, list);\r\n    return list;\r\n  },\r\n\r\n  _queryElements(elements, matcher, halter, list) {\r\n    for (let i=0, l=elements.length, c; (i<l) && (c=elements[i]); i++) {\r\n      if (c.nodeType === Node.ELEMENT_NODE &&\r\n          this._queryElement(c, matcher, halter, list)) {\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n\r\n  _queryElement(node, matcher, halter, list) {\r\n    let result = matcher(node);\r\n    if (result) {\r\n      list.push(node);\r\n    }\r\n    if (halter && halter(result)) {\r\n      return result;\r\n    }\r\n    this._queryElements(tree.Logical.getChildNodes(node), matcher,\r\n      halter, list);\r\n  },\r\n\r\n  activeElementForNode(node) {\r\n    let active = document.activeElement;\r\n    if (!active) {\r\n      return null;\r\n    }\r\n    let isShadyRoot = !!(utils.isShadyRoot(node));\r\n    if (node !== document) {\r\n      // If this node isn't a document or shady root, then it doesn't have\r\n      // an active element.\r\n      if (!isShadyRoot) {\r\n        return null;\r\n      }\r\n      // If this shady root's host is the active element or the active\r\n      // element is not a descendant of the host (in the composed tree),\r\n      // then it doesn't have an active element.\r\n      if (node.host === active ||\r\n          !node.host.contains(active)) {\r\n        return null;\r\n      }\r\n    }\r\n    // This node is either the document or a shady root of which the active\r\n    // element is a (composed) descendant of its host; iterate upwards to\r\n    // find the active element's most shallow host within it.\r\n    let activeRoot = this.ownerShadyRootForNode(active);\r\n    while (activeRoot && activeRoot !== node) {\r\n      active = activeRoot.host;\r\n      activeRoot = this.ownerShadyRootForNode(active);\r\n    }\r\n    if (node === document) {\r\n      // This node is the document, so activeRoot should be null.\r\n      return activeRoot ? null : active;\r\n    } else {\r\n      // This node is a non-document shady root, and it should be\r\n      // activeRoot.\r\n      return activeRoot === node ? active : null;\r\n    }\r\n  }\r\n\r\n};\r\n\r\nlet nativeCloneNode = Element.prototype.cloneNode;\r\nlet nativeImportNode = Document.prototype.importNode;\r\nlet nativeSetAttribute = Element.prototype.setAttribute;\r\nlet nativeRemoveAttribute = Element.prototype.removeAttribute;\r\n\r\nlet NodeMixin = {};\r\n\r\nObject.defineProperties(NodeMixin, {\r\n\r\n  parentElement: {\r\n    get() {\r\n      return tree.Logical.getParentNode(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  parentNode: {\r\n    get() {\r\n      return tree.Logical.getParentNode(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  nextSibling: {\r\n    get() {\r\n      return tree.Logical.getNextSibling(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  previousSibling: {\r\n    get() {\r\n      return tree.Logical.getPreviousSibling(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  nextElementSibling: {\r\n    get() {\r\n      return tree.Logical.getNextElementSibling(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  previousElementSibling: {\r\n    get() {\r\n      return tree.Logical.getPreviousElementSibling(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  assignedSlot: {\r\n    get() {\r\n      return this._assignedSlot;\r\n    },\r\n    configurable: true\r\n  }\r\n});\r\n\r\nlet FragmentMixin = {\r\n\r\n  appendChild(node) {\r\n    return this.insertBefore(node);\r\n  },\r\n\r\n  // cases in which we may not be able to just do standard native call\r\n  // 1. container has a shadyRoot (needsDistribution IFF the shadyRoot\r\n  // has an insertion point)\r\n  // 2. container is a shadyRoot (don't distribute, instead set\r\n  // container to container.host.\r\n  // 3. node is <content> (host of container needs distribution)\r\n  insertBefore(node, ref_node) {\r\n    if (ref_node && tree.Logical.getParentNode(ref_node) !== this) {\r\n      throw Error('The ref_node to be inserted before is not a child ' +\r\n        'of this node');\r\n    }\r\n    // remove node from its current position iff it's in a tree.\r\n    if (node.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {\r\n      let parent = tree.Logical.getParentNode(node);\r\n      mixinImpl.removeNodeFromParent(node, parent);\r\n    }\r\n    if (!mixinImpl.addNode(this, node, ref_node)) {\r\n      if (ref_node) {\r\n        // if ref_node is an insertion point replace with first distributed node\r\n        let root = mixinImpl.ownerShadyRootForNode(ref_node);\r\n        if (root) {\r\n          ref_node = ref_node.localName === root.getInsertionPointTag() ?\r\n            mixinImpl.firstComposedNode(ref_node) : ref_node;\r\n        }\r\n      }\r\n      // if adding to a shadyRoot, add to host instead\r\n      let container = utils.isShadyRoot(this) ?\r\n        this.host : this;\r\n      if (ref_node) {\r\n        tree.Composed.insertBefore(container, node, ref_node);\r\n      } else {\r\n        tree.Composed.appendChild(container, node);\r\n      }\r\n    }\r\n    mixinImpl._scheduleObserver(this, node);\r\n    return node;\r\n  },\r\n\r\n  /**\r\n    Removes the given `node` from the element's `lightChildren`.\r\n    This method also performs dom composition.\r\n  */\r\n  removeChild(node) {\r\n    if (tree.Logical.getParentNode(node) !== this) {\r\n      throw Error('The node to be removed is not a child of this node: ' +\r\n        node);\r\n    }\r\n    if (!mixinImpl.removeNode(node)) {\r\n      // if removing from a shadyRoot, remove form host instead\r\n      let container = utils.isShadyRoot(this) ?\r\n        this.host :\r\n        this;\r\n      // not guaranteed to physically be in container; e.g.\r\n      // undistributed nodes.\r\n      let parent = tree.Composed.getParentNode(node);\r\n      if (container === parent) {\r\n        tree.Composed.removeChild(container, node);\r\n      }\r\n    }\r\n    mixinImpl._scheduleObserver(this, null, node);\r\n    return node;\r\n  },\r\n\r\n  replaceChild(node, ref_node) {\r\n    this.insertBefore(node, ref_node);\r\n    this.removeChild(ref_node);\r\n    return node;\r\n  },\r\n\r\n  // TODO(sorvell): consider doing native QSA and filtering results.\r\n  querySelector(selector) {\r\n    // match selector and halt on first result.\r\n    let result = mixinImpl.query(this, function(n) {\r\n      return utils.matchesSelector(n, selector);\r\n    }, function(n) {\r\n      return Boolean(n);\r\n    })[0];\r\n    return result || null;\r\n  },\r\n\r\n  querySelectorAll(selector) {\r\n    return mixinImpl.query(this, function(n) {\r\n      return utils.matchesSelector(n, selector);\r\n    });\r\n  },\r\n\r\n  cloneNode(deep) {\r\n    if (this.localName == 'template') {\r\n      return nativeCloneNode.call(this, deep);\r\n    } else {\r\n      let n = nativeCloneNode.call(this, false);\r\n      if (deep) {\r\n        let c$ = this.childNodes;\r\n        for (let i=0, nc; i < c$.length; i++) {\r\n          nc = c$[i].cloneNode(true);\r\n          n.appendChild(nc);\r\n        }\r\n      }\r\n      return n;\r\n    }\r\n  },\r\n\r\n  importNode(externalNode, deep) {\r\n    // for convenience use this node's ownerDoc if the node isn't a document\r\n    let doc = this instanceof Document ? this :\r\n      this.ownerDocument;\r\n    let n = nativeImportNode.call(doc, externalNode, false);\r\n    if (deep) {\r\n      let c$ = tree.Logical.getChildNodes(externalNode);\r\n      utils.common.patchNode(n);\r\n      for (let i=0, nc; i < c$.length; i++) {\r\n        nc = doc.importNode(c$[i], true);\r\n        n.appendChild(nc);\r\n      }\r\n    }\r\n    return n;\r\n  }\r\n};\r\n\r\nObject.defineProperties(FragmentMixin, {\r\n\r\n  childNodes: {\r\n    get() {\r\n      let c$ = tree.Logical.getChildNodes(this);\r\n      return Array.isArray(c$) ? c$ : tree.arrayCopyChildNodes(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  children: {\r\n    get() {\r\n      if (tree.Logical.hasChildNodes(this)) {\r\n        return Array.prototype.filter.call(this.childNodes, function(n) {\r\n          return (n.nodeType === Node.ELEMENT_NODE);\r\n        });\r\n      } else {\r\n        return tree.arrayCopyChildren(this);\r\n      }\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  firstChild: {\r\n    get() {\r\n      return tree.Logical.getFirstChild(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  lastChild: {\r\n    get() {\r\n      return tree.Logical.getLastChild(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  firstElementChild: {\r\n    get() {\r\n      return tree.Logical.getFirstElementChild(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  lastElementChild: {\r\n    get() {\r\n      return tree.Logical.getLastElementChild(this);\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  // TODO(srovell): strictly speaking fragments do not have textContent\r\n  // or innerHTML but ShadowRoots do and are not easily distinguishable.\r\n  // textContent / innerHTML\r\n  textContent: {\r\n    get() {\r\n      if (this.childNodes) {\r\n        let tc = [];\r\n        for (let i = 0, cn = this.childNodes, c; (c = cn[i]); i++) {\r\n          if (c.nodeType !== Node.COMMENT_NODE) {\r\n            tc.push(c.textContent);\r\n          }\r\n        }\r\n        return tc.join('');\r\n      }\r\n      return '';\r\n    },\r\n    set(text) {\r\n      mixinImpl.clearNode(this);\r\n      if (text) {\r\n        this.appendChild(document.createTextNode(text));\r\n      }\r\n    },\r\n    configurable: true\r\n  },\r\n\r\n  innerHTML: {\r\n    get() {\r\n      return getInnerHTML(this);\r\n    },\r\n    set(text) {\r\n      mixinImpl.clearNode(this);\r\n      let d = document.createElement('div');\r\n      d.innerHTML = text;\r\n      // here, appendChild may move nodes async so we cannot rely\r\n      // on node position when copying\r\n      let c$ = tree.arrayCopyChildNodes(d);\r\n      for (let i=0; i < c$.length; i++) {\r\n        this.appendChild(c$[i]);\r\n      }\r\n    },\r\n    configurable: true\r\n  }\r\n\r\n});\r\n\r\nlet ElementMixin = {\r\n\r\n  // TODO(sorvell): should only exist on <slot>\r\n  assignedNodes(options) {\r\n    return (options && options.flatten ? this._distributedNodes :\r\n      this._assignedNodes) || [];\r\n  },\r\n\r\n\r\n  setAttribute(name, value) {\r\n    nativeSetAttribute.call(this, name, value);\r\n    if (!mixinImpl.maybeDistributeParent(this)) {\r\n      mixinImpl.maybeDistributeAttributeChange(this, name);\r\n    }\r\n  },\r\n\r\n  removeAttribute(name) {\r\n    nativeRemoveAttribute.call(this, name);\r\n    if (!mixinImpl.maybeDistributeParent(this)) {\r\n      mixinImpl.maybeDistributeAttributeChange(this, name);\r\n    }\r\n  }\r\n\r\n};\r\n\r\nObject.defineProperties(ElementMixin, {\r\n\r\n  shadowRoot: {\r\n    get() {\r\n      return this.shadyRoot;\r\n    }\r\n  },\r\n\r\n  slot: {\r\n    get() {\r\n      return this.getAttribute('slot');\r\n    },\r\n    set(value) {\r\n      this.setAttribute('slot', value);\r\n    }\r\n  }\r\n\r\n});\r\n\r\nlet activeElementDescriptor = {\r\n  get() {\r\n    return mixinImpl.activeElementForNode(this);\r\n  }\r\n}\r\n\r\nlet ActiveElementMixin = {};\r\nObject.defineProperties(ActiveElementMixin, {\r\n  activeElement: activeElementDescriptor\r\n});\r\n\r\nlet UnderActiveElementMixin = {};\r\nObject.defineProperties(UnderActiveElementMixin, {\r\n  _activeElement: activeElementDescriptor\r\n});\r\n\r\nexport let Mixins = {\r\n\r\n  Node: utils.extendAll({__patched: 'Node'}, NodeMixin),\r\n\r\n  Fragment: utils.extendAll({__patched: 'Fragment'},\r\n    NodeMixin, FragmentMixin, ActiveElementMixin),\r\n\r\n  Element: utils.extendAll({__patched: 'Element'},\r\n    NodeMixin, FragmentMixin, ElementMixin, ActiveElementMixin),\r\n\r\n  // Note: activeElement cannot be patched on document!\r\n  Document: utils.extendAll({__patched: 'Document'},\r\n    NodeMixin, FragmentMixin, ElementMixin, UnderActiveElementMixin)\r\n\r\n};\r\n\r\nexport let getRootNode = function(node) {\r\n  return mixinImpl.getRootNode(node);\r\n}\r\n\r\nexport function filterMutations(mutations, target) {\r\n  const targetRootNode = getRootNode(target);\r\n  return mutations.filter(function(mutation) {\r\n    const mutationInScope = (targetRootNode === getRootNode(mutation.target));\r\n    if (mutationInScope && mutation.addedNodes) {\r\n      let nodes = Array.from(mutation.addedNodes).filter(function(n) {\r\n        return (targetRootNode === getRootNode(n));\r\n      });\r\n      Object.defineProperty(mutation, 'addedNodes', {\r\n        value: nodes,\r\n        configurable: true\r\n      });\r\n    }\r\n    return mutationInScope &&\r\n      (!mutation.addedNodes || mutation.addedNodes.length);\r\n  });\r\n}\r\n\r\n// const promise = Promise.resolve();\r\n\r\nclass AsyncObserver {\r\n\r\n  constructor() {\r\n    this._scheduled = false;\r\n    this.addedNodes = [];\r\n    this.removedNodes = [];\r\n    this.callbacks = new Set();\r\n  }\r\n\r\n  schedule() {\r\n    if (!this._scheduled) {\r\n      this._scheduled = true;\r\n      utils.promish.then(() => {\r\n        this.flush();\r\n      });\r\n    }\r\n  }\r\n\r\n  flush() {\r\n    if (this._scheduled) {\r\n      this._scheduled = false;\r\n      let mutations = this.takeRecords();\r\n      if (mutations.length) {\r\n        this.callbacks.forEach(function(cb) {\r\n          cb(mutations);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  takeRecords() {\r\n    if (this.addedNodes.length || this.removedNodes.length) {\r\n      let mutations = [{\r\n        addedNodes: this.addedNodes,\r\n        removedNodes: this.removedNodes\r\n      }];\r\n      this.addedNodes = [];\r\n      this.removedNodes = [];\r\n      return mutations;\r\n    }\r\n    return [];\r\n  }\r\n\r\n}\r\n\r\n// TODO(sorvell): consider instead polyfilling MutationObserver\r\n// directly so that users do not have to fork their code.\r\n// Supporting the entire api may be challenging: e.g. filtering out\r\n// removed nodes in the wrong scope and seeing non-distributing\r\n// subtree child mutations.\r\nexport let observeChildren = function(node, callback) {\r\n  utils.common.patchNode(node);\r\n  if (!node.__dom.observer) {\r\n    node.__dom.observer = new AsyncObserver();\r\n  }\r\n  node.__dom.observer.callbacks.add(callback);\r\n  let observer = node.__dom.observer;\r\n  return {\r\n    _callback: callback,\r\n    _observer: observer,\r\n    _node: node,\r\n    takeRecords() {\r\n      return observer.takeRecords()\r\n    }\r\n  };\r\n}\r\n\r\nexport let unobserveChildren = function(handle) {\r\n  let observer = handle && handle._observer;\r\n  if (observer) {\r\n    observer.callbacks.delete(handle._callback);\r\n    if (!observer.callbacks.size) {\r\n      handle._node.__dom.observer = null;\r\n    }\r\n  }\r\n}","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n/**\r\n * Patches elements that interacts with ShadyDOM\r\n * such that tree traversal and mutation apis act like they would under\r\n * ShadowDOM.\r\n *\r\n * This import enables seemless interaction with ShadyDOM powered\r\n * custom elements, enabling better interoperation with 3rd party code,\r\n * libraries, and frameworks that use DOM tree manipulation apis.\r\n */\r\n\r\n'use strict';\r\nimport {tree} from './tree'\r\nimport * as utils from './utils'\r\nimport {Mixins} from './element-mixin'\r\n\r\nexport let patchedCount = 0;\r\n\r\nlet log = false;\r\n\r\nlet patchImpl = {\r\n\r\n  canPatchNode: function(node) {\r\n    switch (node) {\r\n      case document.head:\r\n      case document.documentElement:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  },\r\n\r\n  hasPrototypeDescriptors: Boolean(Object.getOwnPropertyDescriptor(\r\n    window.Node.prototype, 'textContent')),\r\n\r\n  patch: function(node) {\r\n    patchedCount++;\r\n    log && window.console.warn('patch node', node);\r\n    if (this.hasPrototypeDescriptors) {\r\n      utils.patchPrototype(node, this.mixinForObject(node));\r\n    } else {\r\n      window.console.warn('Patching instance rather than prototype', node);\r\n      utils.extend(node, this.mixinForNode(node));\r\n    }\r\n  },\r\n\r\n  mixinForObject: function(obj) {\r\n    switch (obj.nodeType) {\r\n      case Node.ELEMENT_NODE:\r\n        return Mixins.Element;\r\n      case Node.DOCUMENT_FRAGMENT_NODE:\r\n        return Mixins.Fragment;\r\n      case Node.DOCUMENT_NODE:\r\n        return Mixins.Document;\r\n      case Node.TEXT_NODE:\r\n      case Node.COMMENT_NODE:\r\n        return Mixins.Node;\r\n    }\r\n  },\r\n\r\n  unpatch: function(obj) {\r\n    if (obj.__sourceProto) {\r\n      obj.__proto__ = obj.__sourceProto;\r\n\r\n    }\r\n    // TODO(sorvell): implement unpatching for non-proto patchable browsers\r\n  }\r\n\r\n};\r\n\r\nexport function patchNode(node) {\r\n  if (!utils.settings.inUse) {\r\n    return;\r\n  }\r\n  if (!isNodePatched(node) && patchImpl.canPatchNode(node)) {\r\n    tree.saveChildNodes(node);\r\n    patchImpl.patch(node);\r\n  }\r\n}\r\n\r\nexport function unpatchNode(node) {\r\n  patchImpl.unpatch(node);\r\n}\r\n\r\nexport function isNodePatched(node) {\r\n  return Boolean(node.__patched);\r\n}\r\n\r\n// TODO(sorvell): fake export\r\nutils.common.patchNode = patchNode;\r\nutils.common.isNodePatched = isNodePatched;","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nimport * as utils from './utils'\r\n\r\nlet origAddEventListener = Element.prototype.addEventListener;\r\nlet origRemoveEventListener = Element.prototype.removeEventListener;\r\n\r\n// https://github.com/w3c/webcomponents/issues/513#issuecomment-224183937\r\nlet alwaysComposed = {\r\n  blur: true,\r\n  focus: true,\r\n  focusin: true,\r\n  focusout: true,\r\n  click: true,\r\n  dblclick: true,\r\n  mousedown: true,\r\n  mouseenter: true,\r\n  mouseleave: true,\r\n  mousemove: true,\r\n  mouseout: true,\r\n  mouseover: true,\r\n  mouseup: true,\r\n  wheel: true,\r\n  beforeinput: true,\r\n  input: true,\r\n  keydown: true,\r\n  keyup: true,\r\n  compositionstart: true,\r\n  compositionupdate: true,\r\n  compositionend: true,\r\n  touchstart: true,\r\n  touchend: true,\r\n  touchmove: true,\r\n  touchcancel: true,\r\n  pointerover: true,\r\n  pointerenter: true,\r\n  pointerdown: true,\r\n  pointermove: true,\r\n  pointerup: true,\r\n  pointercancel: true,\r\n  pointerout: true,\r\n  pointerleave: true,\r\n  gotpointercapture: true,\r\n  lostpointercapture: true,\r\n  dragstart: true,\r\n  drag: true,\r\n  dragenter: true,\r\n  dragleave: true,\r\n  dragover: true,\r\n  drop: true,\r\n  dragend: true,\r\n  DOMActivate: true,\r\n  DOMFocusIn: true,\r\n  DOMFocusOut: true,\r\n  keypress: true\r\n};\r\n\r\nfunction pathComposer(startNode, composed) {\r\n  let composedPath = [];\r\n  let current = startNode;\r\n  let startRoot = startNode === window ? window : startNode.getRootNode();\r\n  while (current) {\r\n    composedPath.push(current);\r\n    if (current.assignedSlot) {\r\n      current = current.assignedSlot;\r\n    } else if (current.nodeType === Node.DOCUMENT_FRAGMENT_NODE && current.host && (composed || current !== startRoot)) {\r\n      current = current.host;\r\n    } else {\r\n      current = current.parentNode;\r\n    }\r\n  }\r\n  // event composedPath includes window when startNode's ownerRoot is document\r\n  if (composedPath[composedPath.length - 1] === document) {\r\n    composedPath.push(window);\r\n  }\r\n  return composedPath;\r\n}\r\n\r\nfunction retarget(refNode, path) {\r\n  if (!utils.isShadyRoot) {\r\n    return refNode;\r\n  }\r\n  // If ANCESTOR's root is not a shadow root or ANCESTOR's root is BASE's\r\n  // shadow-including inclusive ancestor, return ANCESTOR.\r\n  let refNodePath = pathComposer(refNode, true);\r\n  let p$ = path;\r\n  for (let i=0, ancestor, lastRoot, root, rootIdx; i < p$.length; i++) {\r\n    ancestor = p$[i];\r\n    root = ancestor === window ? window : ancestor.getRootNode();\r\n    if (root !== lastRoot) {\r\n      rootIdx = refNodePath.indexOf(root);\r\n      lastRoot = root;\r\n    }\r\n    if (!utils.isShadyRoot(root) || rootIdx > -1) {\r\n      return ancestor;\r\n    }\r\n  }\r\n}\r\n\r\nlet EventMixin = {\r\n\r\n  __patched: 'Event',\r\n\r\n  get composed() {\r\n    if (this.isTrusted && this.__composed === undefined) {\r\n      this.__composed = alwaysComposed[this.type];\r\n    }\r\n    return this.__composed || false;\r\n  },\r\n\r\n  composedPath() {\r\n    if (!this.__composedPath) {\r\n      this.__composedPath = pathComposer(this.__target, this.composed);\r\n    }\r\n    return this.__composedPath;\r\n  },\r\n\r\n  get target() {\r\n    return retarget(this.currentTarget, this.composedPath());\r\n  },\r\n\r\n  // http://w3c.github.io/webcomponents/spec/shadow/#event-relatedtarget-retargeting\r\n  get relatedTarget() {\r\n    if (!this.__relatedTarget) {\r\n      return null;\r\n    }\r\n    if (!this.__relatedTargetComposedPath) {\r\n      this.__relatedTargetComposedPath = pathComposer(this.__relatedTarget, true);\r\n    }\r\n    // find the deepest node in relatedTarget composed path that is in the same root with the currentTarget\r\n    return retarget(this.currentTarget, this.__relatedTargetComposedPath);\r\n  },\r\n  stopPropagation() {\r\n    Event.prototype.stopPropagation.call(this);\r\n    this.__propagationStopped = true;\r\n  },\r\n  stopImmediatePropagation() {\r\n    Event.prototype.stopImmediatePropagation.call(this);\r\n    this.__immediatePropagationStopped = true;\r\n    this.__propagationStopped = true;\r\n  }\r\n\r\n};\r\n\r\nfunction mixinComposedFlag(Base) {\r\n  // NOTE: avoiding use of `class` here so that transpiled output does not\r\n  // try to do `Base.call` with a dom construtor.\r\n  let klazz = function(type, options) {\r\n    let event = new Base(type, options);\r\n    event.__composed = options && Boolean(options.composed);\r\n    return event;\r\n  }\r\n  // put constructor properties on subclass\r\n  utils.mixin(klazz, Base);\r\n  klazz.prototype = Base.prototype;\r\n  return klazz;\r\n}\r\n\r\nlet nonBubblingEventsToRetarget = {\r\n  focus: true,\r\n  blur: true\r\n};\r\n\r\nfunction fireHandlers(event, node, phase) {\r\n  let hs = node.__handlers && node.__handlers[event.type] &&\r\n    node.__handlers[event.type][phase];\r\n  if (hs) {\r\n    for (let i = 0, fn; (fn = hs[i]); i++) {\r\n      fn.call(node, event);\r\n      if (event.__immediatePropagationStopped) {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction retargetNonBubblingEvent(e) {\r\n  let path = e.composedPath();\r\n  let node;\r\n  // override `currentTarget` to let patched `target` calculate correctly\r\n  Object.defineProperty(e, 'currentTarget', {\r\n    get: function() {\r\n      return node;\r\n    },\r\n    configurable: true\r\n  });\r\n  for (let i = path.length - 1; i >= 0; i--) {\r\n    node = path[i];\r\n    fireHandlers(e, node, 'capture');\r\n    if (e.__propagationStopped) {\r\n      return;\r\n    }\r\n  }\r\n  Object.defineProperty(e, 'eventPhase', {value: Event.BUBBLING_PHASE});\r\n  for (let i = 0; i < path.length; i++) {\r\n    node = path[i];\r\n    fireHandlers(e, node, 'bubble');\r\n    if (e.__propagationStopped) {\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction shouldCapture(optionsOrCapture) {\r\n  return Boolean(typeof optionsOrCapture === 'object' ?\r\n    optionsOrCapture.capture : optionsOrCapture);\r\n}\r\n\r\n/**\r\n * Returns an eventWrapperId formatted as \"type|options\". All these cases return\r\n * the same result:\r\n * - getEventWrapperId('some-event', false|null|undefined)\r\n * - getEventWrapperId('some-event', {capture: false|null|undefined})\r\n * - getEventWrapperId('some-event', {})\r\n * @param {!string} type\r\n * @param {(Object|boolean)=} options\r\n * @return {string}\r\n */\r\nfunction getEventWrapperId(type, options) {\r\n  return type + '|' + JSON.stringify(normalizedOptions(options));\r\n}\r\n\r\n/**\r\n * @param {(Object|boolean)=} options\r\n * @return {Object}\r\n */\r\nfunction normalizedOptions(options) {\r\n  // Handle the case where `options` is not an object.\r\n  if (typeof options !== 'object') {\r\n    options = {\r\n      capture: shouldCapture(options)\r\n    };\r\n  }\r\n  return {\r\n    capture: Boolean(options.capture),\r\n    passive: Boolean(options.passive),\r\n    once: Boolean(options.once)\r\n  };\r\n}\r\n\r\nexport function addEventListener(type, fn, optionsOrCapture) {\r\n  if (!fn) {\r\n    return;\r\n  }\r\n  // TODO: investigate if this is worth tracking, as it is only used for\r\n  // deciding if the `slotchanged` event should be fired\r\n  if (!this.__eventListenerCount) {\r\n    this.__eventListenerCount = 0;\r\n  }\r\n  this.__eventListenerCount++;\r\n\r\n  // The function might be used for multiple events, so we need to keep track of\r\n  // the event type, options, and node into this object where the key determines\r\n  // the Id of the wrapped function (type+options), and the value is a WeakMap where\r\n  // we associate a node to the wrapped function.\r\n  fn.__eventWrappers = fn.__eventWrappers || {};\r\n  // This event listener might be added multiple times, we need to be able to remove\r\n  // all the wrappers we add.\r\n  const eventWrapperId = getEventWrapperId(type, optionsOrCapture);\r\n  const wrappersForType = fn.__eventWrappers[eventWrapperId] || new WeakMap();\r\n  fn.__eventWrappers[eventWrapperId] = wrappersForType;\r\n  // If this event listener was already added, no need to create a new wrapper\n  // for the function.\r\n  if (wrappersForType.has(this)) {\r\n    return;\r\n  }\r\n\r\n  const wrappedFn = function(e) {\r\n    // Support `once` option.\r\n    if (optionsOrCapture && optionsOrCapture.once) {\r\n      this.removeEventListener(type, fn, optionsOrCapture);\r\n    }\r\n    if (!e.__target) {\r\n      e.__target = e.target;\r\n      e.__relatedTarget = e.relatedTarget;\r\n      utils.patchPrototype(e, EventMixin);\r\n    }\r\n    // There are two critera that should stop events from firing on this node\r\n    // 1. the event is not composed and the current node is not in the same root as the target\r\n    // 2. when bubbling, if after retargeting, relatedTarget and target point to the same node\r\n    if (e.composed || e.composedPath().indexOf(this) > -1) {\r\n      if (e.eventPhase === Event.BUBBLING_PHASE) {\r\n        if (e.target === e.relatedTarget) {\r\n          e.stopImmediatePropagation();\r\n          return;\r\n        }\r\n      }\r\n      return fn(e);\r\n    }\r\n  };\r\n  // Store the wrapped function.\r\n  wrappersForType.set(this, wrappedFn);\r\n\r\n  if (nonBubblingEventsToRetarget[type]) {\r\n    this.__handlers = this.__handlers || {};\r\n    this.__handlers[type] = this.__handlers[type] || {capture: [], bubble: []};\r\n    if (shouldCapture(optionsOrCapture)) {\r\n      this.__handlers[type].capture.push(wrappedFn);\r\n    } else {\r\n      this.__handlers[type].bubble.push(wrappedFn);\r\n    }\r\n  } else {\r\n    origAddEventListener.call(this, type, wrappedFn, optionsOrCapture);\r\n  }\r\n}\r\n\r\nexport function removeEventListener(type, fn, optionsOrCapture) {\r\n  if (!fn) {\r\n    return;\r\n  }\r\n  // Search the wrapped function.\r\n  const wrappers = fn.__eventWrappers || {};\r\n  const wrappersForType = wrappers[getEventWrapperId(type, optionsOrCapture)] || new WeakMap();\r\n  const wrapperFn = wrappersForType.get(this);\r\n  wrappersForType.delete(this);\n\r\n  origRemoveEventListener.call(this, type, wrapperFn || fn, optionsOrCapture);\r\n  if (wrapperFn) {\r\n    this.__eventListenerCount--;\r\n    if (nonBubblingEventsToRetarget[type]) {\r\n      if (this.__handlers) {\r\n        if (this.__handlers[type]) {\r\n          let idx;\r\n          if (shouldCapture(optionsOrCapture)) {\r\n            idx = this.__handlers[type].capture.indexOf(wrapperFn);\r\n            if (idx > -1) {\r\n              this.__handlers[type].capture.splice(idx, 1);\r\n            }\r\n          } else {\r\n            idx = this.__handlers[type].bubble.indexOf(wrapperFn);\r\n            if (idx > -1) {\r\n              this.__handlers[type].bubble.splice(idx, 1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function activateFocusEventOverrides() {\r\n  for (let ev in nonBubblingEventsToRetarget) {\r\n    window.addEventListener(ev, function(e) {\r\n      if (!e.__target) {\r\n        e.__target = e.target;\r\n        e.__relatedTarget = e.relatedTarget;\r\n        utils.patchPrototype(e, EventMixin);\r\n        retargetNonBubblingEvent(e);\r\n        e.stopImmediatePropagation();\r\n      }\r\n    }, true);\r\n  }\r\n}\r\n\r\nexport let OriginalEvent = Event;\r\nexport let PatchedEvent = mixinComposedFlag(Event);\r\nexport let PatchedCustomEvent = mixinComposedFlag(CustomEvent);\r\nexport let PatchedMouseEvent = mixinComposedFlag(MouseEvent);\r\n","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n'use strict';\r\n\r\nimport {tree} from './tree'\r\n\r\n// NOTE: normalize event contruction where necessary (IE11)\r\nlet NormalizedEvent = typeof Event === 'function' ? Event :\r\n  function(inType, params) {\r\n    params = params || {};\r\n    var e = document.createEvent('Event');\r\n    e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable));\r\n    return e;\r\n  };\r\n\r\nexport default class {\r\n\r\n  constructor(root) {\r\n    this.root = root;\r\n    this.insertionPointTag = 'slot';\r\n  }\r\n\r\n  getInsertionPoints() {\r\n    return this.root.querySelectorAll(this.insertionPointTag);\r\n  }\r\n\r\n  hasInsertionPoint() {\r\n    return Boolean(this.root._insertionPoints &&\r\n      this.root._insertionPoints.length);\r\n  }\r\n\r\n  isInsertionPoint(node) {\r\n    return node.localName && node.localName == this.insertionPointTag;\r\n  }\r\n\r\n  distribute() {\r\n    if (this.hasInsertionPoint()) {\r\n      return this.distributePool(this.root, this.collectPool());\r\n    }\r\n    return [];\r\n  }\r\n\r\n  // Gather the pool of nodes that should be distributed. We will combine\r\n  // these with the \"content root\" to arrive at the composed tree.\r\n  collectPool() {\r\n    return tree.arrayCopy(\r\n      tree.Logical.getChildNodes(this.root.host));\r\n  }\r\n\r\n  // perform \"logical\" distribution; note, no actual dom is moved here,\r\n  // instead elements are distributed into storage\r\n  // array where applicable.\r\n  distributePool(node, pool) {\r\n    let dirtyRoots = [];\r\n    let p$ = this.root._insertionPoints;\r\n    for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\r\n      this.distributeInsertionPoint(p, pool);\r\n      // provoke redistribution on insertion point parents\r\n      // must do this on all candidate hosts since distribution in this\r\n      // scope invalidates their distribution.\r\n      // only get logical parent.\r\n      let parent = tree.Logical.getParentNode(p);\r\n      if (parent && parent.shadyRoot &&\r\n          this.hasInsertionPoint(parent.shadyRoot)) {\r\n        dirtyRoots.push(parent.shadyRoot);\r\n      }\r\n    }\r\n    for (let i=0; i < pool.length; i++) {\r\n      let p = pool[i];\r\n      if (p) {\r\n        p._assignedSlot = undefined;\r\n        // remove undistributed elements from physical dom.\r\n        let parent = tree.Composed.getParentNode(p);\r\n        if (parent) {\r\n          tree.Composed.removeChild(parent, p);\r\n        }\r\n      }\r\n    }\r\n    return dirtyRoots;\r\n  }\r\n\r\n  distributeInsertionPoint(insertionPoint, pool) {\r\n    let prevAssignedNodes = insertionPoint._assignedNodes;\r\n    if (prevAssignedNodes) {\r\n      this.clearAssignedSlots(insertionPoint, true);\r\n    }\r\n    insertionPoint._assignedNodes = [];\r\n    let needsSlotChange = false;\r\n    // distribute nodes from the pool that this selector matches\r\n    let anyDistributed = false;\r\n    for (let i=0, l=pool.length, node; i < l; i++) {\r\n      node=pool[i];\r\n      // skip nodes that were already used\r\n      if (!node) {\r\n        continue;\r\n      }\r\n      // distribute this node if it matches\r\n      if (this.matchesInsertionPoint(node, insertionPoint)) {\r\n        if (node.__prevAssignedSlot != insertionPoint) {\r\n          needsSlotChange = true;\r\n        }\r\n        this.distributeNodeInto(node, insertionPoint)\r\n        // remove this node from the pool\r\n        pool[i] = undefined;\r\n        // since at least one node matched, we won't need fallback content\r\n        anyDistributed = true;\r\n      }\r\n    }\r\n    // Fallback content if nothing was distributed here\r\n    if (!anyDistributed) {\r\n      let children = tree.Logical.getChildNodes(insertionPoint);\r\n      for (let j = 0, node; j < children.length; j++) {\r\n        node = children[j];\r\n        if (node.__prevAssignedSlot != insertionPoint) {\r\n          needsSlotChange = true;\r\n        }\r\n        this.distributeNodeInto(node, insertionPoint);\r\n      }\r\n    }\r\n    // we're already dirty if a node was newly added to the slot\r\n    // and we're also dirty if the assigned count decreased.\r\n    if (prevAssignedNodes) {\r\n      // TODO(sorvell): the tracking of previously assigned slots\r\n      // could instead by done with a Set and then we could\r\n      // avoid needing to iterate here to clear the info.\r\n      for (let i=0; i < prevAssignedNodes.length; i++) {\r\n        prevAssignedNodes[i].__prevAssignedSlot = null;\r\n      }\r\n      if (insertionPoint._assignedNodes.length < prevAssignedNodes.length) {\r\n        needsSlotChange = true;\r\n      }\r\n    }\r\n    this.setDistributedNodesOnInsertionPoint(insertionPoint);\r\n    if (needsSlotChange) {\r\n      this._fireSlotChange(insertionPoint);\r\n    }\r\n  }\r\n\r\n  clearAssignedSlots(slot, savePrevious) {\r\n    let n$ = slot._assignedNodes;\r\n    if (n$) {\r\n      for (let i=0; i < n$.length; i++) {\r\n        let n = n$[i];\r\n        if (savePrevious) {\r\n          n.__prevAssignedSlot = n._assignedSlot;\r\n        }\r\n        // only clear if it was previously set to this slot;\r\n        // this helps ensure that if the node has otherwise been distributed\r\n        // ignore it.\r\n        if (n._assignedSlot === slot) {\r\n          n._assignedSlot = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  matchesInsertionPoint(node, insertionPoint) {\r\n    let slotName = insertionPoint.getAttribute('name');\r\n    slotName = slotName ? slotName.trim() : '';\r\n    let slot = node.getAttribute && node.getAttribute('slot');\r\n    slot = slot ? slot.trim() : '';\r\n    return (slot == slotName);\r\n  }\r\n\r\n  distributeNodeInto(child, insertionPoint) {\r\n    insertionPoint._assignedNodes.push(child);\r\n    child._assignedSlot = insertionPoint;\r\n  }\r\n\r\n  setDistributedNodesOnInsertionPoint(insertionPoint) {\r\n    let n$ = insertionPoint._assignedNodes;\r\n    insertionPoint._distributedNodes = [];\r\n    for (let i=0, n; (i<n$.length) && (n=n$[i]) ; i++) {\r\n      if (this.isInsertionPoint(n)) {\r\n        let d$ = n._distributedNodes;\r\n        if (d$) {\r\n          for (let j=0; j < d$.length; j++) {\r\n            insertionPoint._distributedNodes.push(d$[j]);\r\n          }\r\n        }\r\n      } else {\r\n        insertionPoint._distributedNodes.push(n$[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  _fireSlotChange(insertionPoint) {\r\n    // NOTE: cannot bubble correctly here so not setting bubbles: true\r\n    // Safari tech preview does not bubble but chrome does\r\n    // Spec says it bubbles (https://dom.spec.whatwg.org/#mutation-observers)\r\n    insertionPoint.dispatchEvent(new NormalizedEvent('slotchange'));\r\n    if (insertionPoint._assignedSlot) {\r\n      this._fireSlotChange(insertionPoint._assignedSlot);\r\n    }\r\n  }\r\n\r\n  isFinalDestination(insertionPoint) {\r\n    return !(insertionPoint._assignedSlot);\r\n  }\r\n\r\n}","/**\r\n@license\r\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\nCode distributed by Google as part of the polymer project is also\r\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n*/\r\n\r\n/**\r\n * Patches elements that interacts with ShadyDOM\r\n * such that tree traversal and mutation apis act like they would under\r\n * ShadowDOM.\r\n *\r\n * This import enables seemless interaction with ShadyDOM powered\r\n * custom elements, enabling better interoperation with 3rd party code,\r\n * libraries, and frameworks that use DOM tree manipulation apis.\r\n */\r\n\r\n'use strict';\r\nimport * as utils from './utils'\r\nimport {ShadyRoot, flush, enqueue} from './shady'\r\nimport * as patch from './patch'\r\nimport {getRootNode, filterMutations, observeChildren, unobserveChildren}\r\n  from './element-mixin'\r\nimport * as events from './event-mixin'\r\nimport {tree, getNativeProperty} from './tree'\r\n\r\nif (utils.settings.inUse) {\r\n\r\n  window.ShadyDOM = {\r\n    tree: tree,\r\n    getNativeProperty: getNativeProperty,\r\n    patch: patch.patchNode,\r\n    isPatched: patch.isNodePatched,\r\n    unpatch: patch.unpatchNode,\r\n    isShadyRoot: utils.isShadyRoot,\r\n    enqueue: enqueue,\r\n    flush: flush,\r\n    inUse: utils.settings.inUse,\r\n    filterMutations: filterMutations,\r\n    observeChildren: observeChildren,\r\n    unobserveChildren: unobserveChildren\r\n  };\r\n\r\n  let createRootAndEnsurePatched = function(node) {\r\n    // TODO(sorvell): need to ensure ancestors are patched but this introduces\r\n    // a timing problem with gathering composed children.\r\n    // (1) currently the child list is crawled and patched when patching occurs\r\n    // (this needs to change)\r\n    // (2) we can only patch when an element has received its parsed children\r\n    // because we cannot detect them when inserted by parser.\r\n    // let ancestor = node;\r\n    // while (ancestor) {\r\n    //   patchNode(ancestor);\r\n    //   ancestor = ancestor.parentNode || ancestor.host;\r\n    // }\r\n    patch.patchNode(node);\r\n    let root = new ShadyRoot(node);\r\n    patch.patchNode(root);\r\n    return root;\r\n  }\r\n\r\n  Element.prototype.attachShadow = function() {\r\n    return createRootAndEnsurePatched(this);\r\n  }\r\n\r\n  Node.prototype.addEventListener = events.addEventListener;\r\n  Node.prototype.removeEventListener = events.removeEventListener;\r\n  Event = events.PatchedEvent;\r\n  CustomEvent = events.PatchedCustomEvent;\r\n  MouseEvent = events.PatchedMouseEvent;\r\n  events.activateFocusEventOverrides();\r\n\r\n  Object.defineProperty(Node.prototype, 'isConnected', {\r\n    get() {\r\n      return document.documentElement.contains(this);\r\n    },\r\n    configurable: true\r\n  });\r\n\r\n  Node.prototype.getRootNode = function(options) {\r\n    return getRootNode(this, options);\r\n  }\r\n\r\n  Object.defineProperty(Element.prototype, 'slot', {\r\n    get() {\r\n      return this.getAttribute('slot');\r\n    },\r\n    set(value) {\r\n      this.setAttribute('slot', value);\r\n    },\r\n    configurable: true\r\n  });\r\n\r\n  Object.defineProperty(Node.prototype, 'assignedSlot', {\r\n    get() {\r\n      return this._assignedSlot || null;\r\n    },\r\n    configurable: true\r\n  });\r\n\r\n  // TODO(sorvell): super experimental auto patching of document fragment\r\n  // via appendChild. This either needs to be expanded or contracted.\r\n  // DocumentFragment.prototype.appendChild = function(node) {\r\n  //   patchNode(this);\r\n  //   return this.appendChild(node);\r\n  // }\r\n\r\n}\r\n"]}